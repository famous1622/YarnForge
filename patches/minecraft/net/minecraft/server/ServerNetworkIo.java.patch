--- a/net\minecraft\server\ServerNetworkIo.java
+++ b/net\minecraft\server\ServerNetworkIo.java
@@ -49,11 +49,12 @@
 
 public class ServerNetworkIo {
    private static final Logger LOGGER = LogManager.getLogger();
+   private static final int READ_TIMEOUT = Integer.parseInt(System.getProperty("forge.readTimeout", "30"));
    public static final Lazy<NioEventLoopGroup> DEFAULT_CHANNEL = new Lazy<>(() -> {
-      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
    });
    public static final Lazy<EpollEventLoopGroup> EPOLL_CHANNEL = new Lazy<>(() -> {
-      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
    });
    private final MinecraftServer server;
    public volatile boolean active;
@@ -66,6 +67,7 @@
    }
 
    public void bind(@Nullable InetAddress address, int port) throws IOException {
+      if (address instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
       synchronized(this.channels) {
          Class<? extends ServerSocketChannel> oclass;
          Lazy<? extends EventLoopGroup> lazyvalue;
@@ -87,7 +89,7 @@
                   ;
                }
 
-               p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyQueryHandler(ServerNetworkIo.this)).addLast("splitter", new SplitterHandler()).addLast("decoder", new DecoderHandler(NetworkSide.field_11941)).addLast("prepender", new SizePrepender()).addLast("encoder", new PacketEncoder(NetworkSide.field_11942));
+               p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(READ_TIMEOUT)).addLast("legacy_query", new LegacyQueryHandler(ServerNetworkIo.this)).addLast("splitter", new SplitterHandler()).addLast("decoder", new DecoderHandler(NetworkSide.field_11941)).addLast("prepender", new SizePrepender()).addLast("encoder", new PacketEncoder(NetworkSide.field_11942));
                ClientConnection networkmanager = new ClientConnection(NetworkSide.field_11941);
                ServerNetworkIo.this.connections.add(networkmanager);
                p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
