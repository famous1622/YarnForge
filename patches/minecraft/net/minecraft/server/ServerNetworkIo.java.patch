--- a/net/minecraft/server/ServerNetworkIo.java
+++ b/net/minecraft/server/ServerNetworkIo.java
@@ -38,6 +38,7 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+
 import net.minecraft.network.ClientConnection;
 import net.minecraft.network.DecoderHandler;
 import net.minecraft.network.LegacyQueryHandler;
@@ -46,14 +47,14 @@
 import net.minecraft.network.SizePrepender;
 import net.minecraft.network.SplitterHandler;
 
-
 public class ServerNetworkIo {
+   private static final int READ_TIMEOUT = Integer.parseInt(System.getProperty("forge.readTimeout", "30"));
    private static final Logger LOGGER = LogManager.getLogger();
    public static final Lazy<NioEventLoopGroup> DEFAULT_CHANNEL = new Lazy<>(() -> {
-      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
    });
    public static final Lazy<EpollEventLoopGroup> EPOLL_CHANNEL = new Lazy<>(() -> {
-      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
    });
    private final MinecraftServer server;
    public volatile boolean active;
@@ -66,6 +67,7 @@
    }
 
    public void bind(@Nullable InetAddress address, int port) throws IOException {
+      if (address instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
       synchronized(this.channels) {
          Class<? extends ServerSocketChannel> oclass;
          Lazy<? extends EventLoopGroup> lazyloadbase;
@@ -87,7 +89,7 @@
                   ;
                }
 
-               p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyQueryHandler(ServerNetworkIo.this)).addLast("splitter", new SplitterHandler()).addLast("decoder", new DecoderHandler(NetworkSide.SERVERBOUND)).addLast("prepender", new SizePrepender()).addLast("encoder", new PacketEncoder(NetworkSide.CLIENTBOUND));
+               p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(READ_TIMEOUT)).addLast("legacy_query", new LegacyQueryHandler(ServerNetworkIo.this)).addLast("splitter", new SplitterHandler()).addLast("decoder", new DecoderHandler(NetworkSide.SERVERBOUND)).addLast("prepender", new SizePrepender()).addLast("encoder", new PacketEncoder(NetworkSide.CLIENTBOUND));
                ClientConnection networkmanager = new ClientConnection(NetworkSide.SERVERBOUND);
                ServerNetworkIo.this.connections.add(networkmanager);
                p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
