--- a/net/minecraft/client/texture/TextureStitcher.java
+++ b/net/minecraft/client/texture/TextureStitcher.java
@@ -13,6 +13,8 @@
 
 @OnlyIn(Dist.CLIENT)
 public class TextureStitcher {
+   private static final org.apache.logging.log4j.Logger LOGGER = org.apache.logging.log4j.LogManager.getLogger();
+
    private static final Comparator<TextureStitcher.Holder> comparator = Comparator.<TextureStitcher.Holder, Integer>comparing((p_217793_0_) -> {
       return -p_217793_0_.height;
    }).thenComparing((p_217795_0_) -> {
@@ -53,6 +55,12 @@
 
       for(TextureStitcher.Holder stitcher$holder : list) {
          if (!this.tryFit(stitcher$holder)) {
+            LOGGER.info(new net.minecraftforge.fml.loading.AdvancedLogMessageAdapter(sb->{
+               sb.append("Unable to fit: ").append(stitcher$holder.sprite.getId());
+               sb.append(" - size: ").append(stitcher$holder.sprite.getWidth()).append("x").append(stitcher$holder.sprite.getHeight());
+               sb.append(" - Maybe try a lower resolution resourcepack?\n");
+               list.forEach(h-> sb.append("\t").append(h).append("\n"));
+            }));
             throw new TextureStitcherCannotFitException(stitcher$holder.sprite, list.stream().map((p_225334_0_) -> {
                return p_225334_0_.sprite;
             }).collect(ImmutableList.toImmutableList()));
@@ -106,7 +114,7 @@
          boolean flag4 = flag2 && j != l;
          boolean flag;
          if (flag3 ^ flag4) {
-            flag = flag3;
+            flag = !flag3 && flag1; // Forge: Fix stitcher not expanding entire height before growing width, and (potentially) growing larger then the max size.
          } else {
             flag = flag1 && i <= j;
          }
@@ -143,7 +151,7 @@
       }
 
       public String toString() {
-         return "Holder{width=" + this.width + ", height=" + this.height + '}';
+         return "Holder{width=" + this.width + ", height=" + this.height + ", name=" + this.sprite.getId() + '}';
       }
    }
 
