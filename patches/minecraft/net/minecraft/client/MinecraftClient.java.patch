--- a/net/minecraft/client/MinecraftClient.java
+++ b/net/minecraft/client/MinecraftClient.java
@@ -117,22 +117,12 @@
 import net.minecraft.util.crash.CrashReportSection;
 import net.minecraft.util.crash.CrashException;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.decoration.ArmorStandEntity;
-import net.minecraft.entity.vehicle.BoatEntity;
-import net.minecraft.entity.decoration.EnderCrystalEntity;
-import net.minecraft.entity.decoration.ItemFrameEntity;
-import net.minecraft.entity.decoration.LeadKnotEntity;
-import net.minecraft.entity.decoration.painting.PaintingEntity;
-import net.minecraft.entity.vehicle.AbstractMinecartEntity;
 import net.minecraft.client.options.ChatVisibility;
 import net.minecraft.entity.player.PlayerEntity;
-import net.minecraft.entity.player.PlayerInventory;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemGroup;
 import net.minecraft.item.ItemStack;
-import net.minecraft.item.Items;
 import net.minecraft.item.SkullItem;
-import net.minecraft.item.SpawnEggItem;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
@@ -158,7 +148,6 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.integrated.IntegratedServer;
 import net.minecraft.util.UserCache;
-import net.minecraft.tag.ItemTags;
 import net.minecraft.block.entity.SkullBlockEntity;
 import net.minecraft.block.entity.BlockEntity;
 import net.minecraft.util.ActionResult;
@@ -200,10 +189,10 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+
 import net.minecraft.client.options.GameOptions;
 import net.minecraft.client.util.Window;
 
-
 @OnlyIn(Dist.CLIENT)
 public class MinecraftClient extends NonBlockingThreadExecutor<Runnable> implements SnooperListener, WindowEventHandler, AutoCloseable {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -317,6 +306,7 @@
       super("Client");
       this.windowSettings = gameConfig.windowSettings;
       instance = this;
+      net.minecraftforge.client.ForgeHooksClient.invalidateLog4jThreadCache();
       this.runDirectory = gameConfig.directories.runDir;
       this.assetDirectory = gameConfig.directories.assetDir;
       this.resourcePackDir = gameConfig.directories.resourcePackDir;
@@ -334,7 +324,7 @@
             supplier = p_213262_2_;
          }
 
-         return new ClientResourcePackContainer(p_213262_0_, p_213262_1_, supplier, p_213262_3_, p_213262_4_, p_213262_5_);
+         return new ClientResourcePackContainer(p_213262_0_, p_213262_1_, supplier, p_213262_3_, p_213262_4_, p_213262_5_, p_213262_3_.isHidden());
       });
       this.resourcePackContainerManager.addCreator(this.resourcePackCreator);
       this.resourcePackContainerManager.addCreator(new FileResourcePackCreator(this.resourcePackDir));
@@ -342,7 +332,6 @@
       this.sessionService = (new YggdrasilAuthenticationService(this.netProxy, UUID.randomUUID().toString())).createMinecraftSessionService();
       this.session = gameConfig.network.session;
       LOGGER.info("Setting user: {}", (Object)this.session.getUsername());
-      LOGGER.debug("(Session ID is {})", (Object)this.session.getSessionId());
       this.isDemo = gameConfig.game.demo;
       this.is64Bit = checkIs64Bit();
       this.server = null;
@@ -424,6 +413,7 @@
          screensize = new WindowSettings(this.options.overrideWidth, this.options.overrideHeight, screensize.fullscreenWidth, screensize.fullscreenHeight, screensize.fullscreen);
       }
 
+      net.minecraftforge.fml.loading.progress.EarlyProgressVisualization.INSTANCE.join();
       LongSupplier longsupplier = GLX.initGlfw();
       if (longsupplier != null) {
          SystemUtil.nanoTimeSupplier = longsupplier;
@@ -443,7 +433,6 @@
 
       this.window.setFramerateLimit(this.options.maxFps);
       this.mouse = new Mouse(this);
-      this.mouse.setup(this.window.getHandle());
       this.keyboard = new Keyboard(this);
       this.keyboard.setup(this.window.getHandle());
       GLX.init();
@@ -452,6 +441,7 @@
       this.framebuffer.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);
       this.resourceManager = new ReloadableResourceManagerImpl(ResourceType.CLIENT_RESOURCES, this.thread);
       this.options.addResourcePackContainersToManager(this.resourcePackContainerManager);
+      net.minecraftforge.fml.client.ClientModLoader.begin(this, this.resourcePackContainerManager, this.resourceManager, this.resourcePackCreator);
       this.resourcePackContainerManager.callCreators();
       List<ResourcePack> list = this.resourcePackContainerManager.getEnabledContainers().stream().map(ResourcePackContainer::createResourcePack).collect(Collectors.toList());
 
@@ -517,12 +507,14 @@
       this.resourceManager.registerListener(this.searchManager);
       GlStateManager.viewport(0, 0, this.window.getFramebufferWidth(), this.window.getFramebufferHeight());
       this.particleManager = new ParticleManager(this.world, this.textureManager);
+      net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.client.event.ParticleFactoryRegisterEvent());
       this.resourceManager.registerListener(this.particleManager);
       this.paintingManager = new PaintingManager(this.textureManager);
       this.resourceManager.registerListener(this.paintingManager);
       this.statusEffectSpriteManager = new StatusEffectSpriteManager(this.textureManager);
       this.resourceManager.registerListener(this.statusEffectSpriteManager);
-      this.inGameHud = new InGameHud(this);
+      this.inGameHud = new net.minecraftforge.client.ForgeIngameGui(this);
+      this.mouse.setup(this.window.getHandle()); //Forge: Moved below ingameGUI setting to prevent NPEs in handeler.
       this.debugRenderer = new DebugRenderer(this);
       GLX.setGlfwErrorCallback(this::handleGlErrorByDisableVsync);
       if (this.options.fullscreen && !this.window.isFullscreen()) {
@@ -533,18 +525,20 @@
       this.window.setVsync(this.options.enableVsync);
       this.window.method_21668(this.options.field_20308);
       this.window.logOnGlError();
-      if (this.autoConnectServerIp != null) {
-         this.openScreen(new ConnectScreen(new TitleScreen(), this, this.autoConnectServerIp, this.autoConnectServerPort));
-      } else {
-         this.openScreen(new TitleScreen(true));
-      }
 
       SplashScreen.method_18819(this);
       this.setOverlay(new SplashScreen(this, this.resourceManager.beginInitialMonitoredReload(SystemUtil.getServerWorkerExecutor(), this, voidFuture), () -> {
          if (SharedConstants.isDevelopment) {
             this.checkGameData();
          }
-
+         if (net.minecraftforge.fml.client.ClientModLoader.completeModLoading()) return; // Do not overwrite the error sceen
+         // FORGE: Move opening initial screen to after startup and events are enabled.
+         // Also Fixes MC-145102
+         if (this.autoConnectServerIp != null) {
+            this.openScreen(new ConnectScreen(new TitleScreen(), this, this.autoConnectServerIp, this.autoConnectServerPort));
+         } else {
+            this.openScreen(new TitleScreen(true));
+         }
       }, false));
    }
 
@@ -559,7 +553,7 @@
          return Stream.of(Registry.ITEM.getId(p_213251_0_.getItem()));
       });
       IdentifierSearchableContainer<ItemStack> searchtreereloadable = new IdentifierSearchableContainer<>((p_213235_0_) -> {
-         return ItemTags.getContainer().getTagsFor(p_213235_0_.getItem()).stream();
+         return p_213235_0_.getItem().getTags().stream();
       });
       DefaultedList<ItemStack> nonnulllist = DefaultedList.of();
 
@@ -648,7 +642,7 @@
       Bootstrap.println(crashReportIn.asString());
       if (crashReportIn.getFile() != null) {
          Bootstrap.println("#@!@# Game crashed! Crash report saved to: #@!@# " + crashReportIn.getFile());
-         System.exit(-1);
+         net.minecraftforge.fml.server.ServerLifecycleHooks.handleExit(-1);
       } else if (crashReportIn.writeToFile(file2)) {
          Bootstrap.println("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
          System.exit(-1);
@@ -663,6 +657,7 @@
       return this.options.forceUnicodeFont;
    }
 
+   @Deprecated // Forge: Use selective refreshResources method in FMLClientHandler
    public CompletableFuture<Void> reloadResources() {
       if (this.resourceReloadFuture != null) {
          return this.resourceReloadFuture;
@@ -742,16 +737,20 @@
    }
 
    public void openScreen(@Nullable Screen guiScreenIn) {
-      if (this.currentScreen != null) {
-         this.currentScreen.removed();
-      }
-
       if (guiScreenIn == null && this.world == null) {
          guiScreenIn = new TitleScreen();
       } else if (guiScreenIn == null && this.player.getHealth() <= 0.0F) {
          guiScreenIn = new DeathScreen((Text)null, this.world.getLevelProperties().isHardcore());
       }
 
+      Screen old = this.currentScreen;
+      net.minecraftforge.client.event.GuiOpenEvent event = new net.minecraftforge.client.event.GuiOpenEvent(guiScreenIn);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+
+      guiScreenIn = event.getGui();
+      if (old != null && guiScreenIn != old)
+         old.removed();
+
       if (guiScreenIn instanceof TitleScreen || guiScreenIn instanceof MultiplayerScreen) {
          this.options.debugEnabled = false;
          this.inGameHud.getChatHud().clear(true);
@@ -876,11 +875,13 @@
       GlStateManager.enableTexture();
       this.profiler.pop();
       if (!this.skipGameRender) {
+         net.minecraftforge.fml.hooks.BasicEventHooks.onRenderTickStart(this.renderTickCounter.tickDelta);
          this.profiler.swap("gameRenderer");
          this.gameRenderer.render(this.paused ? this.pausedTickDelta : this.renderTickCounter.tickDelta, i, renderWorldIn);
          this.profiler.swap("toasts");
          this.toastManager.draw();
          this.profiler.pop();
+         net.minecraftforge.fml.hooks.BasicEventHooks.onRenderTickEnd(this.renderTickCounter.tickDelta);
       }
 
       this.profiler.endTick();
@@ -1148,10 +1149,10 @@
          if (leftClick && this.hitResult != null && this.hitResult.getType() == HitResult.Type.BLOCK) {
             BlockHitResult blockraytraceresult = (BlockHitResult)this.hitResult;
             BlockPos blockpos = blockraytraceresult.getBlockPos();
-            if (!this.world.getBlockState(blockpos).isAir()) {
+            if (!this.world.isAir(blockpos)) {
                Direction direction = blockraytraceresult.getSide();
                if (this.interactionManager.method_2902(blockpos, direction)) {
-                  this.particleManager.addBlockBreakingParticles(blockpos, direction);
+                  this.particleManager.addBlockHitEffects(blockpos, blockraytraceresult);
                   this.player.swingHand(Hand.MAIN_HAND);
                }
             }
@@ -1178,7 +1179,7 @@
             case BLOCK:
                BlockHitResult blockraytraceresult = (BlockHitResult)this.hitResult;
                BlockPos blockpos = blockraytraceresult.getBlockPos();
-               if (!this.world.getBlockState(blockpos).isAir()) {
+               if (!this.world.getBlockState(blockpos).isAir(world, blockpos)) {
                   this.interactionManager.attackBlock(blockpos, blockraytraceresult.getSide());
                   break;
                }
@@ -1188,6 +1189,7 @@
                }
 
                this.player.resetLastAttackedTicks();
+               net.minecraftforge.common.ForgeHooks.onEmptyLeftClick(this.player);
             }
 
             this.player.swingHand(Hand.MAIN_HAND);
@@ -1237,6 +1239,9 @@
                   }
                }
 
+               if (itemstack.isEmpty() && (this.hitResult == null || this.hitResult.getType() == HitResult.Type.MISS))
+                  net.minecraftforge.common.ForgeHooks.onEmptyClick(this.player, hand);
+
                if (!itemstack.isEmpty() && this.interactionManager.interactItem(this.player, this.world, hand) == ActionResult.SUCCESS) {
                   this.gameRenderer.firstPersonRenderer.resetEquipProgress(hand);
                   return;
@@ -1256,6 +1261,8 @@
          --this.itemUseCooldown;
       }
 
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPreClientTick();
+
       this.profiler.push("gui");
       if (!this.paused) {
          this.inGameHud.tick();
@@ -1374,6 +1381,8 @@
       this.profiler.swap("keyboard");
       this.keyboard.pollDebugCrash();
       this.profiler.pop();
+
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPostClientTick();
    }
 
    private void handleInputEvents() {
@@ -1528,6 +1537,12 @@
       this.openScreen(worldloadprogressscreen);
 
       while(!this.server.isLoading()) {
+         if (!net.minecraftforge.fml.StartupQuery.check() || this.server.isStopped()) {
+            this.openScreen(null);
+            return;
+         } else if (this.currentScreen == null) // if we're showing nothing, put the working screen back again
+           this.openScreen(worldloadprogressscreen);
+
          worldloadprogressscreen.tick();
          this.render(false);
 
@@ -1548,11 +1563,17 @@
       networkmanager.setPacketListener(new ClientLoginNetworkHandler(networkmanager, this, (Screen)null, (p_213261_0_) -> {
       }));
       networkmanager.send(new HandshakeC2SPacket(socketaddress.toString(), 0, NetworkState.LOGIN));
-      networkmanager.send(new LoginHelloC2SPacket(this.getSession().getProfile()));
+      com.mojang.authlib.GameProfile gameProfile = this.getSession().getProfile();
+      if (!this.getSession().hasCachedProperties()) {
+         gameProfile = sessionService.fillProfileProperties(gameProfile, true); //Forge: Fill profile properties upon game load. Fixes MC-52974.
+         this.getSession().setProperties(gameProfile.getProperties());
+      }
+      networkmanager.send(new LoginHelloC2SPacket(gameProfile));
       this.clientConnection = networkmanager;
    }
 
    public void joinWorld(ClientWorld worldClientIn) {
+      if (world != null) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(world));
       ProgressScreen workingscreen = new ProgressScreen();
       workingscreen.method_15412(new TranslatableText("connect.joining"));
       this.reset(workingscreen);
@@ -1584,10 +1605,12 @@
       IntegratedServer integratedserver = this.server;
       this.server = null;
       this.gameRenderer.reset();
+      net.minecraftforge.fml.client.ClientHooks.firePlayerLogout(this.interactionManager, this.player);
       this.interactionManager = null;
       NarratorManager.INSTANCE.clear();
       this.reset(screenIn);
       if (this.world != null) {
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(world));
          if (integratedserver != null) {
             while(!integratedserver.isStopping()) {
                this.render(false);
@@ -1625,6 +1648,7 @@
       }
 
       BlockEntityRenderDispatcher.INSTANCE.setWorld(worldIn);
+      net.minecraftforge.client.MinecraftForgeClient.clearRenderCache();
    }
 
    public final boolean isDemo() {
@@ -1650,112 +1674,8 @@
 
    private void doItemPick() {
       if (this.hitResult != null && this.hitResult.getType() != HitResult.Type.MISS) {
-         boolean flag = this.player.abilities.creativeMode;
-         BlockEntity tileentity = null;
-         HitResult.Type raytraceresult$type = this.hitResult.getType();
-         ItemStack itemstack;
-         if (raytraceresult$type == HitResult.Type.BLOCK) {
-            BlockPos blockpos = ((BlockHitResult)this.hitResult).getBlockPos();
-            BlockState blockstate = this.world.getBlockState(blockpos);
-            Block block = blockstate.getBlock();
-            if (blockstate.isAir()) {
-               return;
-            }
-
-            itemstack = block.getPickStack(this.world, blockpos, blockstate);
-            if (itemstack.isEmpty()) {
-               return;
-            }
-
-            if (flag && Screen.hasControlDown() && block.hasBlockEntity()) {
-               tileentity = this.world.getBlockEntity(blockpos);
-            }
-         } else {
-            if (raytraceresult$type != HitResult.Type.ENTITY || !flag) {
-               return;
-            }
-
-            Entity entity = ((EntityHitResult)this.hitResult).getEntity();
-            if (entity instanceof PaintingEntity) {
-               itemstack = new ItemStack(Items.PAINTING);
-            } else if (entity instanceof LeadKnotEntity) {
-               itemstack = new ItemStack(Items.LEAD);
-            } else if (entity instanceof ItemFrameEntity) {
-               ItemFrameEntity itemframeentity = (ItemFrameEntity)entity;
-               ItemStack itemstack1 = itemframeentity.getHeldItemStack();
-               if (itemstack1.isEmpty()) {
-                  itemstack = new ItemStack(Items.ITEM_FRAME);
-               } else {
-                  itemstack = itemstack1.copy();
-               }
-            } else if (entity instanceof AbstractMinecartEntity) {
-               AbstractMinecartEntity abstractminecartentity = (AbstractMinecartEntity)entity;
-               Item item;
-               switch(abstractminecartentity.getMinecartType()) {
-               case FURNACE:
-                  item = Items.FURNACE_MINECART;
-                  break;
-               case CHEST:
-                  item = Items.CHEST_MINECART;
-                  break;
-               case TNT:
-                  item = Items.TNT_MINECART;
-                  break;
-               case HOPPER:
-                  item = Items.HOPPER_MINECART;
-                  break;
-               case COMMAND_BLOCK:
-                  item = Items.COMMAND_BLOCK_MINECART;
-                  break;
-               default:
-                  item = Items.MINECART;
-               }
-
-               itemstack = new ItemStack(item);
-            } else if (entity instanceof BoatEntity) {
-               itemstack = new ItemStack(((BoatEntity)entity).asItem());
-            } else if (entity instanceof ArmorStandEntity) {
-               itemstack = new ItemStack(Items.ARMOR_STAND);
-            } else if (entity instanceof EnderCrystalEntity) {
-               itemstack = new ItemStack(Items.END_CRYSTAL);
-            } else {
-               SpawnEggItem spawneggitem = SpawnEggItem.forEntity(entity.getType());
-               if (spawneggitem == null) {
-                  return;
-               }
-
-               itemstack = new ItemStack(spawneggitem);
-            }
-         }
-
-         if (itemstack.isEmpty()) {
-            String s = "";
-            if (raytraceresult$type == HitResult.Type.BLOCK) {
-               s = Registry.BLOCK.getId(this.world.getBlockState(((BlockHitResult)this.hitResult).getBlockPos()).getBlock()).toString();
-            } else if (raytraceresult$type == HitResult.Type.ENTITY) {
-               s = Registry.ENTITY_TYPE.getId(((EntityHitResult)this.hitResult).getEntity().getType()).toString();
-            }
-
-            LOGGER.warn("Picking on: [{}] {} gave null item", raytraceresult$type, s);
-         } else {
-            PlayerInventory playerinventory = this.player.inventory;
-            if (tileentity != null) {
-               this.addBlockEntityNbt(itemstack, tileentity);
-            }
-
-            int i = playerinventory.getSlotWithStack(itemstack);
-            if (flag) {
-               playerinventory.addPickBlock(itemstack);
-               this.interactionManager.clickCreativeStack(this.player.getStackInHand(Hand.MAIN_HAND), 36 + playerinventory.selectedSlot);
-            } else if (i != -1) {
-               if (PlayerInventory.isValidHotbarIndex(i)) {
-                  playerinventory.selectedSlot = i;
-               } else {
-                  this.interactionManager.pickFromInventory(i);
-               }
-            }
-
-         }
+         net.minecraftforge.common.ForgeHooks.onPickBlock(this.hitResult, this.player, this.world);
+         // We delete this code wholly instead of commenting it out, to make sure we detect changes in it between MC versions
       }
    }
 
@@ -1827,6 +1747,7 @@
       return instance;
    }
 
+   @Deprecated // Forge: Use selective scheduleResourceRefresh method in FMLClientHandler
    public CompletableFuture<Void> reloadResourcesConcurrently() {
       return this.executeFuture(this::reloadResources).thenCompose((p_213240_0_) -> {
          return p_213240_0_;
@@ -1973,6 +1894,8 @@
    }
 
    public MusicTracker.MusicType getMusicType() {
+      MusicTracker.MusicType type = this.world == null || this.world.dimension == null ? null : this.world.dimension.getMusicType();
+      if (type != null) return type;
       if (this.currentScreen instanceof EndCreditsScreen) {
          return MusicTracker.MusicType.CREDITS;
       } else if (this.player == null) {
@@ -2129,4 +2052,12 @@
    public Overlay getOverlay() {
       return this.overlay;
    }
+
+   public ItemColors getItemColors() {
+      return this.itemColorMap;
+   }
+
+   public SearchManager getSearchTreeManager() {
+      return this.searchManager;
+   }
 }
