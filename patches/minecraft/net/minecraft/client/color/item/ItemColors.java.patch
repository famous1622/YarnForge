--- a/net/minecraft/client/color/item/ItemColors.java
+++ b/net/minecraft/client/color/item/ItemColors.java
@@ -12,19 +12,18 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.potion.PotionUtil;
 import net.minecraft.item.ItemConvertible;
-import net.minecraft.util.IdList;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.registry.Registry;
 import net.minecraft.client.color.world.GrassColors;
 import net.minecraft.world.ExtendedBlockView;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
-import net.minecraft.client.color.block.BlockColors;
 
+import net.minecraft.client.color.block.BlockColors;
 
 @OnlyIn(Dist.CLIENT)
 public class ItemColors {
-   private final IdList<ItemColorProvider> providers = new IdList<>(32);
+   // FORGE: Use RegistryDelegates as non-Vanilla item ids are not constant
+   private final java.util.Map<net.minecraftforge.registries.IRegistryDelegate<Item>, ItemColorProvider> providers = new java.util.HashMap<>();
 
    public static ItemColors create(BlockColors colors) {
       ItemColors itemcolors = new ItemColors();
@@ -82,17 +81,18 @@
       itemcolors.register((p_210237_0_, p_210237_1_) -> {
          return p_210237_1_ == 0 ? -1 : FilledMapItem.getMapColor(p_210237_0_);
       }, Items.FILLED_MAP);
+      net.minecraftforge.client.ForgeHooksClient.onItemColorsInit(itemcolors, colors);
       return itemcolors;
    }
 
    public int getColorMultiplier(ItemStack stack, int tintIndex) {
-      ItemColorProvider iitemcolor = this.providers.get(Registry.ITEM.getRawId(stack.getItem()));
+      ItemColorProvider iitemcolor = this.providers.get(stack.getItem().delegate);
       return iitemcolor == null ? -1 : iitemcolor.getColor(stack, tintIndex);
    }
 
    public void register(ItemColorProvider itemColor, ItemConvertible... itemsIn) {
       for(ItemConvertible iitemprovider : itemsIn) {
-         this.providers.set(itemColor, Item.getRawId(iitemprovider.asItem()));
+         this.providers.put(iitemprovider.asItem().delegate, itemColor);
       }
 
    }
