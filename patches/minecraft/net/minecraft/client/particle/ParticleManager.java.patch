--- a/net/minecraft/client/particle/ParticleManager.java
+++ b/net/minecraft/client/particle/ParticleManager.java
@@ -7,8 +7,6 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import com.mojang.blaze3d.platform.GlStateManager;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.Reader;
@@ -63,7 +61,7 @@
    private final Queue<EmitterParticle> newEmitterParticles = Queues.newArrayDeque();
    private final TextureManager textureManager;
    private final Random random = new Random();
-   private final Int2ObjectMap<ParticleFactory<?>> factories = new Int2ObjectOpenHashMap<>();
+   private final Map<Identifier, ParticleFactory<?>> factories = new java.util.HashMap<>();
    private final Queue<Particle> newParticles = Queues.newArrayDeque();
    private final Map<Identifier, ParticleManager.SimpleSpriteProvider> field_18300 = Maps.newHashMap();
    private final SpriteAtlasTexture particleAtlasTexture = new SpriteAtlasTexture("textures/particle");
@@ -137,13 +135,13 @@
    }
 
    public <T extends ParticleEffect> void registerFactory(ParticleType<T> particleTypeIn, ParticleFactory<T> particleFactoryIn) {
-      this.factories.put(Registry.PARTICLE_TYPE.getRawId(particleTypeIn), particleFactoryIn);
+      this.factories.put(Registry.PARTICLE_TYPE.getId(particleTypeIn), particleFactoryIn);
    }
 
    public <T extends ParticleEffect> void registerFactory(ParticleType<T> particleTypeIn, ParticleManager.class_4091<T> particleMetaFactoryIn) {
       ParticleManager.SimpleSpriteProvider particlemanager$animatedspriteimpl = new ParticleManager.SimpleSpriteProvider();
       this.field_18300.put(Registry.PARTICLE_TYPE.getId(particleTypeIn), particlemanager$animatedspriteimpl);
-      this.factories.put(Registry.PARTICLE_TYPE.getRawId(particleTypeIn), particleMetaFactoryIn.create(particlemanager$animatedspriteimpl));
+      this.factories.put(Registry.PARTICLE_TYPE.getId(particleTypeIn), particleMetaFactoryIn.create(particlemanager$animatedspriteimpl));
    }
 
    public CompletableFuture<Void> reload(ResourceReloadListener.Synchronizer stage, ResourceManager resourceManager, Profiler preparationsProfiler, Profiler reloadProfiler, Executor backgroundExecutor, Executor gameExecutor) {
@@ -230,11 +228,12 @@
 
    @Nullable
    private <T extends ParticleEffect> Particle createParticle(T particleData, double x, double y, double z, double xSpeed, double ySpeed, double zSpeed) {
-      ParticleFactory<T> iparticlefactory = (ParticleFactory<T>) this.factories.get(Registry.PARTICLE_TYPE.getRawId(particleData.getType()));
+      ParticleFactory<T> iparticlefactory = (ParticleFactory<T>) this.factories.get(Registry.PARTICLE_TYPE.getId(particleData.getType()));
       return iparticlefactory == null ? null : iparticlefactory.createParticle(particleData, this.world, x, y, z, xSpeed, ySpeed, zSpeed);
    }
 
    public void addParticle(Particle effect) {
+      if (effect == null) return; //Forge: Prevent modders from being bad and adding nulls causing untraceable NPEs.
       this.newParticles.add(effect);
    }
 
@@ -306,7 +305,8 @@
       Particle.cameraY = p_215233_1_.getPos().y;
       Particle.cameraZ = p_215233_1_.getPos().z;
 
-      for(ParticleTextureSheet iparticlerendertype : PARTICLE_TEXTURE_SHEETS) {
+      for(ParticleTextureSheet iparticlerendertype : this.particles.keySet()) { // Forge: allow custom IParticleRenderType's
+         if(iparticlerendertype == ParticleTextureSheet.NO_RENDER) continue;
          Iterable<Particle> iterable = this.particles.get(iparticlerendertype);
          if (iterable != null) {
             GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -342,7 +342,7 @@
    }
 
    public void addBlockBreakParticles(BlockPos pos, BlockState state) {
-      if (!state.isAir()) {
+      if (!state.isAir(this.world, pos) && !state.addDestroyEffects(this.world, pos, this)) {
          VoxelShape voxelshape = state.getOutlineShape(this.world, pos);
          double d0 = 0.25D;
          voxelshape.forEachBox((p_199284_3_, p_199284_5_, p_199284_7_, p_199284_9_, p_199284_11_, p_199284_13_) -> {
@@ -414,6 +414,12 @@
       return String.valueOf(this.particles.values().stream().mapToInt(Collection::size).sum());
    }
 
+   public void addBlockHitEffects(BlockPos pos, net.minecraft.util.hit.BlockHitResult target) {
+      BlockState state = world.getBlockState(pos);
+      if (!state.addHitEffects(world, target, this))
+         addBlockBreakingParticles(pos, target.getSide());
+   }
+
    @OnlyIn(Dist.CLIENT)
    class SimpleSpriteProvider implements SpriteProvider {
       private List<Sprite> sprites;
