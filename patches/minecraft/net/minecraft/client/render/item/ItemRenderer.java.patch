--- a/net/minecraft/client/render/item/ItemRenderer.java
+++ b/net/minecraft/client/render/item/ItemRenderer.java
@@ -38,10 +38,10 @@
 import net.minecraft.world.World;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+
 import net.minecraft.client.render.BufferBuilder;
 import net.minecraft.client.render.Tessellator;
 
-
 @OnlyIn(Dist.CLIENT)
 public class ItemRenderer implements SynchronousResourceReloadListener {
    public static final Identifier ENCHANTMENT_GLINT_TEX = new Identifier("textures/misc/enchanted_item_glint.png");
@@ -53,7 +53,7 @@
 
    public ItemRenderer(TextureManager textureManagerIn, BakedModelManager modelManagerIn, ItemColors itemColorsIn) {
       this.textureManager = textureManagerIn;
-      this.models = new ItemModels(modelManagerIn);
+      this.models = new net.minecraftforge.client.ItemModelMesherForge(modelManagerIn);
 
       for(Item item : Registry.ITEM) {
          if (!WITHOUT_MODELS.contains(item)) {
@@ -77,6 +77,10 @@
    }
 
    private void renderModel(BakedModel model, int color, ItemStack stack) {
+      if (net.minecraftforge.common.ForgeConfig.CLIENT.allowEmissiveItems.get()) {
+         net.minecraftforge.client.ForgeHooksClient.renderLitItem(this, model, color, stack);
+         return;
+      }
       Tessellator tessellator = Tessellator.getInstance();
       BufferBuilder bufferbuilder = tessellator.getBufferBuilder();
       bufferbuilder.begin(7, VertexFormats.POSITION_COLOR_UV_NORMAL);
@@ -100,7 +104,7 @@
          if (model.isBuiltin()) {
             GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableRescaleNormal();
-            ItemDynamicRenderer.INSTANCE.render(stack);
+            stack.getItem().getTileEntityItemStackRenderer().render(stack);
          } else {
             this.renderItemModel(model, stack);
             if (stack.hasEnchantmentGlint()) {
@@ -166,7 +170,7 @@
             k = k | -16777216;
          }
 
-         this.renderQuad(renderer, bakedquad, k);
+         net.minecraftforge.client.model.pipeline.LightUtil.renderQuadColor(renderer, bakedquad, k);
       }
 
    }
@@ -227,11 +231,8 @@
          GlStateManager.enableBlend();
          GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
          GlStateManager.pushMatrix();
-         ModelTransformation itemcameratransforms = bakedmodel.getTransformation();
-         ModelTransformation.applyGl(itemcameratransforms.getTransformation(transform), leftHanded);
-         if (this.areFacesFlippedBy(itemcameratransforms.getTransformation(transform))) {
-            GlStateManager.cullFace(GlStateManager.FaceSides.FRONT);
-         }
+         // TODO: check if negative scale is a thing
+         bakedmodel = net.minecraftforge.client.ForgeHooksClient.handleCameraTransforms(bakedmodel, transform, leftHanded);
 
          this.renderItemAndGlow(stack, bakedmodel);
          GlStateManager.cullFace(GlStateManager.FaceSides.BACK);
@@ -262,7 +263,7 @@
       GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
       GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
       this.prepareGuiItemRender(x, y, bakedmodel.hasDepthInGui());
-      bakedmodel.getTransformation().applyGl(ModelTransformation.Type.GUI);
+      bakedmodel = net.minecraftforge.client.ForgeHooksClient.handleCameraTransforms(bakedmodel, ModelTransformation.Type.GUI, false);
       this.renderItemAndGlow(stack, bakedmodel);
       GlStateManager.disableAlphaTest();
       GlStateManager.disableRescaleNormal();
@@ -301,6 +302,7 @@
             crashreportcategory.add("Item Type", () -> {
                return String.valueOf((Object)itemIn.getItem());
             });
+            crashreportcategory.add("Registry Name", () -> String.valueOf(itemIn.getItem().getRegistryName()));
             crashreportcategory.add("Item Damage", () -> {
                return String.valueOf(itemIn.getDamage());
             });
@@ -332,9 +334,12 @@
             GlStateManager.enableBlend();
             GlStateManager.enableLighting();
             GlStateManager.enableDepthTest();
+            // Fixes opaque cooldown overlay a bit lower
+            // TODO: check if enabled blending still screws things up down the line.
+            GlStateManager.enableBlend();
          }
 
-         if (stack.isDamaged()) {
+         if (stack.getItem().showDurabilityBar(stack)) {
             GlStateManager.disableLighting();
             GlStateManager.disableDepthTest();
             GlStateManager.disableTexture();
@@ -342,11 +347,9 @@
             GlStateManager.disableBlend();
             Tessellator tessellator = Tessellator.getInstance();
             BufferBuilder bufferbuilder = tessellator.getBufferBuilder();
-            float f = (float)stack.getDamage();
-            float f1 = (float)stack.getMaxDamage();
-            float f2 = Math.max(0.0F, (f1 - f) / f1);
-            int i = Math.round(13.0F - f * 13.0F / f1);
-            int j = MathHelper.hsvToRgb(f2 / 3.0F, 1.0F, 1.0F);
+            double health = stack.getItem().getDurabilityForDisplay(stack);
+            int i = Math.round(13.0F - (float)health * 13.0F);
+            int j = stack.getItem().getRGBDurabilityForDisplay(stack);
             this.renderGuiQuad(bufferbuilder, xPosition + 2, yPosition + 13, 13, 2, 0, 0, 0, 255);
             this.renderGuiQuad(bufferbuilder, xPosition + 2, yPosition + 13, i, 1, j >> 16 & 255, j >> 8 & 255, j & 255, 255);
             GlStateManager.enableBlend();
@@ -385,4 +388,9 @@
    public void apply(ResourceManager resourceManager) {
       this.models.reloadModels();
    }
+
+   @Override
+   public net.minecraftforge.resource.IResourceType getResourceType() {
+      return net.minecraftforge.resource.VanillaResourceType.MODELS;
+   }
 }
