--- a/net/minecraft/client/render/BufferBuilder.java
+++ b/net/minecraft/client/render/BufferBuilder.java
@@ -12,8 +12,8 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import net.minecraft.client.util.GlAllocationUtils;
 
+import net.minecraft.client.util.GlAllocationUtils;
 
 @OnlyIn(Dist.CLIENT)
 public class BufferBuilder {
@@ -120,7 +120,8 @@
 
          bitset.set(i1);
       }
-
+      this.bufInt.limit(this.bufInt.capacity());
+      this.bufInt.position(this.getCurrentSize());
    }
 
    public BufferBuilder.State toBufferState() {
@@ -459,15 +460,15 @@
          break;
       case USHORT:
       case SHORT:
-         this.bufByte.putShort(i, (short)((int)x * 32767 & '\uffff'));
-         this.bufByte.putShort(i + 2, (short)((int)y * 32767 & '\uffff'));
-         this.bufByte.putShort(i + 4, (short)((int)z * 32767 & '\uffff'));
+         this.bufByte.putShort(i, (short)((int)(x * Short.MAX_VALUE) & 0xFFFF));
+         this.bufByte.putShort(i + 2, (short)((int)(y * Short.MAX_VALUE) & 0xFFFF));
+         this.bufByte.putShort(i + 4, (short)((int)(z * Short.MAX_VALUE) & 0xFFFF));
          break;
       case UBYTE:
       case BYTE:
-         this.bufByte.put(i, (byte)((int)x * 127 & 255));
-         this.bufByte.put(i + 1, (byte)((int)y * 127 & 255));
-         this.bufByte.put(i + 2, (byte)((int)z * 127 & 255));
+         this.bufByte.put(i, (byte)((int)(x * Byte.MAX_VALUE) & 0xFF));
+         this.bufByte.put(i + 1, (byte)((int)(y * Byte.MAX_VALUE) & 0xFF));
+         this.bufByte.put(i + 2, (byte)((int)(z * Byte.MAX_VALUE) & 0xFF));
       }
 
       this.nextElement();
@@ -542,4 +543,23 @@
          return this.format;
       }
    }
+   
+   //For some unknown reason Mojang changed the vanilla function to hardcode alpha as 255.... So lets re-add the parameter -.-
+   public void putColorRGBA(int index, int red, int green, int blue, int alpha) {
+      if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
+         this.bufInt.put(index, alpha << 24 | blue << 16 | green << 8 | red);
+      else
+         this.bufInt.put(index, red << 24 | green << 16 | blue << 8 | alpha);
+   }
+   
+   public boolean isColorDisabled() {
+      return colorDisabled;
+   }
+   
+   public void putBulkData(ByteBuffer buffer) {
+      grow(buffer.limit() + this.format.getVertexSize());
+      this.bufByte.position(this.vertexCount * this.format.getVertexSize());
+      this.bufByte.put(buffer);
+      this.vertexCount += buffer.limit() / this.format.getVertexSize();
+   }
 }
