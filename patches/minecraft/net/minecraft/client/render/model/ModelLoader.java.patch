--- a/net/minecraft/client/render/model/ModelLoader.java
+++ b/net/minecraft/client/render/model/ModelLoader.java
@@ -55,6 +55,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import net.minecraft;
 import net.minecraft.client.render.model.json.ItemModelGenerator;
 import net.minecraft.client.render.model.json.JsonUnbakedModel;
 import net.minecraft.client.render.model.json.ModelVariantMap;
@@ -100,7 +101,7 @@
    private final Set<Identifier> modelsToLoad = Sets.newHashSet();
    private final ModelVariantMap.DeserializationContext variantMapDeserializationContext = new ModelVariantMap.DeserializationContext();
    private final Map<Identifier, UnbakedModel> unbakedModels = Maps.newHashMap();
-   private final Map<Triple<Identifier, ModelRotation, Boolean>, BakedModel> bakedModelCache = Maps.newHashMap();
+   private final Map<Triple<Identifier, net.minecraftforge.common.model.IModelState, Boolean>, BakedModel> bakedModelCache = Maps.newHashMap();
    private final Map<Identifier, UnbakedModel> modelsToBake = Maps.newHashMap();
    private final Map<Identifier, BakedModel> bakedModels = Maps.newHashMap();
    private SpriteAtlasTexture.Data spriteAtlasData;
@@ -110,9 +111,17 @@
    });
 
    public ModelLoader(ResourceManager p_i51735_1_, SpriteAtlasTexture p_i51735_2_, BlockColors p_i51735_3_, Profiler p_i51735_4_) {
+      this(p_i51735_1_, p_i51735_2_, p_i51735_3_, true);
+      processLoading(p_i51735_4_);
+   }
+
+   protected ModelLoader(ResourceManager p_i51735_1_, SpriteAtlasTexture p_i51735_2_, BlockColors p_i51735_3_, boolean vanillaBakery) {
       this.resourceManager = p_i51735_1_;
       this.spriteAtlas = p_i51735_2_;
       this.field_20272 = p_i51735_3_;
+   }
+
+   protected void processLoading(Profiler p_i51735_4_) {
       p_i51735_4_.push("missing_model");
 
       try {
@@ -145,12 +154,19 @@
 
       p_i51735_4_.swap("special");
       this.addModel(new ModelIdentifier("minecraft:trident_in_hand#inventory"));
+      for (Identifier rl : getSpecialModels()) {
+          // Same as func_217843_a but without restricting to MRL's
+          UnbakedModel iunbakedmodel = this.getOrLoadModel(rl);
+          this.unbakedModels.put(rl, iunbakedmodel);
+          this.modelsToBake.put(rl, iunbakedmodel);
+      }
       p_i51735_4_.swap("textures");
       Set<String> set = Sets.newLinkedHashSet();
       Set<Identifier> set1 = this.modelsToBake.values().stream().flatMap((p_217838_2_) -> {
          return p_217838_2_.getTextureDependencies(this::getOrLoadModel, set).stream();
       }).collect(Collectors.toSet());
       set1.addAll(DEFAULT_TEXTURES);
+      net.minecraftforge.client.ForgeHooksClient.gatherFluidTextures(set1);
       set.forEach((p_217833_0_) -> {
          LOGGER.warn("Unable to resolve texture reference: {}", (Object)p_217833_0_);
       });
@@ -291,7 +307,7 @@
                      {
                         lvt_13_5_ = this.resourceManager.getAllResources(resourcelocation1).stream().map((p_217839_1_) -> {
                            try (InputStream inputstream = p_217839_1_.getInputStream()) {
-                              Pair<String, ModelVariantMap> pair2 = Pair.of(p_217839_1_.getResourcePackName(), ModelVariantMap.deserialize(this.variantMapDeserializationContext, new InputStreamReader(inputstream, StandardCharsets.UTF_8)));
+                              Pair<String, ModelVariantMap> pair2 = Pair.of(p_217839_1_.getResourcePackName(), ModelVariantMap.fromJson(this.variantMapDeserializationContext, new InputStreamReader(inputstream, StandardCharsets.UTF_8), blockstateLocation, this, this::putModel));
                               return pair2;
                            } catch (Exception exception1) {
                               throw new ModelLoader.ModelLoaderException(String.format("Exception loading blockstate definition: '%s' in resourcepack: '%s': %s", p_217839_1_.getId(), p_217839_1_.getResourcePackName(), exception1.getMessage()));
@@ -407,7 +423,12 @@
 
    @Nullable
    public BakedModel bake(Identifier p_217845_1_, ModelBakeSettings p_217845_2_) {
-      Triple<Identifier, ModelRotation, Boolean> triple = Triple.of(p_217845_1_, p_217845_2_.getRotation(), p_217845_2_.isUvLocked());
+      return getBakedModel(p_217845_1_, p_217845_2_, this.spriteAtlas::getSprite, net.minecraft.client.render.VertexFormats.POSITION_COLOR_UV_NORMAL);
+   }
+
+   @Nullable
+   public BakedModel getBakedModel(Identifier p_217845_1_, ModelBakeSettings p_217845_2_, java.util.function.Function<Identifier, net.minecraft.client.texture.Sprite> textureGetter, net.minecraft.client.render.VertexFormat format) {
+      Triple<Identifier, net.minecraftforge.common.model.IModelState, Boolean> triple = Triple.of(p_217845_1_, p_217845_2_.getState(), p_217845_2_.isUvLocked());
       if (this.bakedModelCache.containsKey(triple)) {
          return this.bakedModelCache.get(triple);
       } else {
@@ -415,11 +436,11 @@
          if (iunbakedmodel instanceof JsonUnbakedModel) {
             JsonUnbakedModel blockmodel = (JsonUnbakedModel)iunbakedmodel;
             if (blockmodel.getRootModel() == GENERATION_MARKER) {
-               return ITEM_MODEL_GENERATOR.create(this.spriteAtlas::getSprite, blockmodel).bake(this, blockmodel, this.spriteAtlas::getSprite, p_217845_2_);
+               return ITEM_MODEL_GENERATOR.create(textureGetter, blockmodel).bake(this, blockmodel, textureGetter, p_217845_2_);
             }
          }
 
-         BakedModel ibakedmodel = iunbakedmodel.bake(this, this.spriteAtlas::getSprite, p_217845_2_);
+         BakedModel ibakedmodel = iunbakedmodel.bake(this, this.spriteAtlas::getSprite, p_217845_2_, format);
          this.bakedModelCache.put(triple, ibakedmodel);
          return ibakedmodel;
       }
@@ -474,6 +495,10 @@
       return this.field_20274;
    }
 
+   public Set<Identifier> getSpecialModels() {
+      return java.util.Collections.emptySet();
+   }
+
    @OnlyIn(Dist.CLIENT)
    static class ModelLoaderException extends RuntimeException {
       public ModelLoaderException(String message) {
