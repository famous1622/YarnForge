--- a/net\minecraft\client\render\block\BlockRenderManager.java
+++ b/net\minecraft\client\render\block\BlockRenderManager.java
@@ -8,7 +8,6 @@
 import net.minecraft.client.render.RenderLayers;
 import net.minecraft.client.render.VertexConsumer;
 import net.minecraft.client.render.VertexConsumerProvider;
-import net.minecraft.client.render.item.BuiltinModelItemRenderer;
 import net.minecraft.client.render.model.BakedModel;
 import net.minecraft.client.util.math.MatrixStack;
 import net.minecraft.fluid.FluidState;
@@ -34,7 +33,7 @@
    public BlockRenderManager(BlockModels shapes, BlockColors colors) {
       this.models = shapes;
       this.blockColors = colors;
-      this.blockModelRenderer = new BlockModelRenderer(this.blockColors);
+      this.blockModelRenderer = new net.minecraftforge.client.model.pipeline.ForgeBlockModelRenderer(this.blockColors);
       this.fluidRenderer = new FluidRenderer();
    }
 
@@ -42,18 +41,26 @@
       return this.models;
    }
 
+   @Deprecated //Forge: Model parameter
    public void renderDamage(BlockState blockStateIn, BlockPos posIn, BlockRenderView lightReaderIn, MatrixStack matrixStackIn, VertexConsumer vertexBuilderIn) {
+      renderModel(blockStateIn, posIn, lightReaderIn, matrixStackIn, vertexBuilderIn, net.minecraftforge.client.model.data.EmptyModelData.INSTANCE);
+   }
+   public void renderModel(BlockState blockStateIn, BlockPos posIn, BlockRenderView lightReaderIn, MatrixStack matrixStackIn, VertexConsumer vertexBuilderIn, net.minecraftforge.client.model.data.IModelData modelData) {
       if (blockStateIn.getRenderType() == BlockRenderType.field_11458) {
          BakedModel ibakedmodel = this.models.getModel(blockStateIn);
          long i = blockStateIn.getRenderingSeed(posIn);
-         this.blockModelRenderer.render(lightReaderIn, ibakedmodel, blockStateIn, posIn, matrixStackIn, vertexBuilderIn, true, this.random, i, OverlayTexture.DEFAULT_UV);
+         this.blockModelRenderer.renderModel(lightReaderIn, ibakedmodel, blockStateIn, posIn, matrixStackIn, vertexBuilderIn, true, this.random, i, OverlayTexture.DEFAULT_UV, modelData);
       }
    }
 
+   @Deprecated //Forge: Model parameter
    public boolean renderBlock(BlockState blockStateIn, BlockPos posIn, BlockRenderView lightReaderIn, MatrixStack matrixStackIn, VertexConsumer vertexBuilderIn, boolean checkSides, Random rand) {
+      return renderModel(blockStateIn, posIn, lightReaderIn, matrixStackIn, vertexBuilderIn, checkSides, rand, net.minecraftforge.client.model.data.EmptyModelData.INSTANCE);
+   }
+   public boolean renderModel(BlockState blockStateIn, BlockPos posIn, BlockRenderView lightReaderIn, MatrixStack matrixStackIn, VertexConsumer vertexBuilderIn, boolean checkSides, Random rand, net.minecraftforge.client.model.data.IModelData modelData) {
       try {
          BlockRenderType blockrendertype = blockStateIn.getRenderType();
-         return blockrendertype != BlockRenderType.field_11458 ? false : this.blockModelRenderer.render(lightReaderIn, this.getModel(blockStateIn), blockStateIn, posIn, matrixStackIn, vertexBuilderIn, checkSides, rand, blockStateIn.getRenderingSeed(posIn), OverlayTexture.DEFAULT_UV);
+         return blockrendertype != BlockRenderType.field_11458 ? false : this.blockModelRenderer.renderModel(lightReaderIn, this.getModel(blockStateIn), blockStateIn, posIn, matrixStackIn, vertexBuilderIn, checkSides, rand, blockStateIn.getRenderingSeed(posIn), OverlayTexture.DEFAULT_UV, modelData);
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.create(throwable, "Tesselating block in world");
          CrashReportSection crashreportcategory = crashreport.addElement("Block being tesselated");
@@ -81,7 +88,11 @@
       return this.models.getModel(state);
    }
 
+   @Deprecated //Forge: Model parameter
    public void renderBlockAsEntity(BlockState blockStateIn, MatrixStack matrixStackIn, VertexConsumerProvider bufferTypeIn, int combinedLightIn, int combinedOverlayIn) {
+      renderBlock(blockStateIn, matrixStackIn, bufferTypeIn, combinedLightIn, combinedOverlayIn, net.minecraftforge.client.model.data.EmptyModelData.INSTANCE);
+   }
+   public void renderBlock(BlockState blockStateIn, MatrixStack matrixStackIn, VertexConsumerProvider bufferTypeIn, int combinedLightIn, int combinedOverlayIn, net.minecraftforge.client.model.data.IModelData modelData) {
       BlockRenderType blockrendertype = blockStateIn.getRenderType();
       if (blockrendertype != BlockRenderType.field_11455) {
          switch(blockrendertype) {
@@ -91,10 +102,11 @@
             float f = (float)(i >> 16 & 255) / 255.0F;
             float f1 = (float)(i >> 8 & 255) / 255.0F;
             float f2 = (float)(i & 255) / 255.0F;
-            this.blockModelRenderer.render(matrixStackIn.peek(), bufferTypeIn.getBuffer(RenderLayers.getEntityBlockLayer(blockStateIn)), blockStateIn, ibakedmodel, f, f1, f2, combinedLightIn, combinedOverlayIn);
+            this.blockModelRenderer.renderModel(matrixStackIn.peek(), bufferTypeIn.getBuffer(RenderLayers.getEntityBlockLayer(blockStateIn)), blockStateIn, ibakedmodel, f, f1, f2, combinedLightIn, combinedOverlayIn, modelData);
             break;
          case field_11456:
-            BuiltinModelItemRenderer.INSTANCE.render(new ItemStack(blockStateIn.getBlock()), matrixStackIn, bufferTypeIn, combinedLightIn, combinedOverlayIn);
+            ItemStack stack = new ItemStack(blockStateIn.getBlock());
+            stack.getItem().getItemStackTileEntityRenderer().render(stack, matrixStackIn, bufferTypeIn, combinedLightIn, combinedOverlayIn);
          }
 
       }
@@ -103,4 +115,9 @@
    public void apply(ResourceManager resourceManager) {
       this.fluidRenderer.onResourceReload();
    }
+
+   @Override
+   public net.minecraftforge.resource.IResourceType getResourceType() {
+      return net.minecraftforge.resource.VanillaResourceType.MODELS;
+   }
 }
