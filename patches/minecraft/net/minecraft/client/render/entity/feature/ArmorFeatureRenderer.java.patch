--- a/net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.java
+++ b/net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.java
@@ -13,7 +13,6 @@
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.entity.EquipmentSlot;
 import net.minecraft.item.ArmorItem;
-import net.minecraft.item.DyeableArmorItem;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.Identifier;
 import net.minecraftforge.api.distmarker.Dist;
@@ -54,24 +53,25 @@
          ArmorItem armoritem = (ArmorItem)itemstack.getItem();
          if (armoritem.getSlotType() == slotIn) {
             A a = this.getArmor(slotIn);
+            a = getArmorModelHook(entityLivingBaseIn, itemstack, slotIn, a);
             ((BipedEntityModel)this.getModel()).setAttributes(a);
             a.animateModel(entityLivingBaseIn, limbSwing, limbSwingAmount, partialTicks);
             this.method_4170(a, slotIn);
             boolean flag = this.isLegs(slotIn);
-            this.bindTexture(this.getArmorTexture(armoritem, flag));
-            if (armoritem instanceof DyeableArmorItem) {
-               int i = ((DyeableArmorItem)armoritem).getColor(itemstack);
+            this.bindTexture(this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, null));
+            if (armoritem instanceof net.minecraft.item.DyeableItem) { // Allow this for anything, not only cloth
+               int i = ((net.minecraft.item.DyeableItem)armoritem).getColor(itemstack);
                float f = (float)(i >> 16 & 255) / 255.0F;
                float f1 = (float)(i >> 8 & 255) / 255.0F;
                float f2 = (float)(i & 255) / 255.0F;
                GlStateManager.color4f(this.red * f, this.green * f1, this.blue * f2, this.alpha);
                a.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
-               this.bindTexture(this.method_4174(armoritem, flag, "overlay"));
+               this.bindTexture(this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, "overlay"));
             }
 
             GlStateManager.color4f(this.red, this.green, this.blue, this.alpha);
             a.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
-            if (!this.ignoreGlint && itemstack.hasEnchantments()) {
+            if (!this.ignoreGlint && itemstack.hasEnchantmentGlint()) {
                renderEnchantedGlint(this::bindTexture, entityLivingBaseIn, a, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
             }
 
@@ -124,15 +124,60 @@
       gamerenderer.setFogBlack(false);
    }
 
+   @Deprecated //Use the more sensitive version getArmorResource below
    private Identifier getArmorTexture(ArmorItem armor, boolean p_177181_2_) {
       return this.method_4174(armor, p_177181_2_, (String)null);
    }
 
+   @Deprecated //Use the more sensitive version getArmorResource below
    private Identifier method_4174(ArmorItem armor, boolean p_177178_2_, @Nullable String p_177178_3_) {
       String s = "textures/models/armor/" + armor.getMaterial().getName() + "_layer_" + (p_177178_2_ ? 2 : 1) + (p_177178_3_ == null ? "" : "_" + p_177178_3_) + ".png";
       return ARMOR_TEXTURE_CACHE.computeIfAbsent(s, Identifier::new);
    }
 
+
+   /*=================================== FORGE START =========================================*/
+
+   /**
+    * Hook to allow item-sensitive armor model. for LayerBipedArmor.
+    */
+   protected A getArmorModelHook(LivingEntity entity, ItemStack itemStack, EquipmentSlot slot, A model) {
+      return model;
+   }
+
+   /**
+    * More generic ForgeHook version of the above function, it allows for Items to have more control over what texture they provide.
+    *
+    * @param entity Entity wearing the armor
+    * @param stack ItemStack for the armor
+    * @param slot Slot ID that the item is in
+    * @param type Subtype, can be null or "overlay"
+    * @return ResourceLocation pointing at the armor's texture
+    */
+   public Identifier getArmorResource(net.minecraft.entity.Entity entity, ItemStack stack, EquipmentSlot slot, @javax.annotation.Nullable String type) {
+      ArmorItem item = (ArmorItem)stack.getItem();
+      String texture = item.getMaterial().getName();
+      String domain = "minecraft";
+      int idx = texture.indexOf(':');
+      if (idx != -1)
+      {
+         domain = texture.substring(0, idx);
+         texture = texture.substring(idx + 1);
+      }
+      String s1 = String.format("%s:textures/models/armor/%s_layer_%d%s.png", domain, texture, (isLegs(slot) ? 2 : 1), type == null ? "" : String.format("_%s", type));
+
+      s1 = net.minecraftforge.client.ForgeHooksClient.getArmorTexture(entity, stack, s1, slot, type);
+      Identifier resourcelocation = (Identifier)ARMOR_TEXTURE_CACHE.get(s1);
+
+      if (resourcelocation == null)
+      {
+         resourcelocation = new Identifier(s1);
+         ARMOR_TEXTURE_CACHE.put(s1, resourcelocation);
+      }
+
+      return resourcelocation;
+   }
+   /*=================================== FORGE END ===========================================*/
    protected abstract void method_4170(A p_188359_1_, EquipmentSlot slotIn);
 
    protected abstract void method_4190(A model);
