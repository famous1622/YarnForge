--- a/net/minecraft/item/Item.java
+++ b/net/minecraft/item/Item.java
@@ -36,12 +36,12 @@
 import net.minecraft.world.World;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+
 import net.minecraft.util.Rarity;
 import net.minecraft.util.UseAction;
 
-
-public class Item implements ItemConvertible {
-   public static final Map<Block, Item> BLOCK_ITEMS = Maps.newHashMap();
+public class Item extends net.minecraftforge.registries.ForgeRegistryEntry<Item> implements ItemConvertible, net.minecraftforge.common.extensions.IForgeItem {
+   public static final Map<Block, Item> BLOCK_ITEMS = net.minecraftforge.registries.GameData.getBlockItemMap();
    private static final ItemPropertyGetter DAMAGED_PROPERTY_GETTER = (p_210306_0_, p_210306_1_, p_210306_2_) -> {
       return p_210306_0_.isDamaged() ? 1.0F : 0.0F;
    };
@@ -98,6 +98,10 @@
          this.addPropertyGetter(new Identifier("damaged"), DAMAGED_PROPERTY_GETTER);
          this.addPropertyGetter(new Identifier("damage"), DAMAGE_PROPERTY_GETTER);
       }
+      this.canRepair = properties.canRepair;
+      this.toolClasses.putAll(properties.toolClasses);
+      Object tmp = properties.teisr == null ? null : net.minecraftforge.fml.DistExecutor.callWhenOn(Dist.CLIENT, properties.teisr);
+      this.teisr = tmp == null ? null : () -> (net.minecraft.client.render.item.ItemDynamicRenderer) tmp;
 
    }
 
@@ -157,10 +161,12 @@
       return this.isFood() ? entityLiving.eatFood(worldIn, stack) : stack;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public final int getMaxCount() {
       return this.maxCount;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public final int getMaxDamage() {
       return this.maxDamage;
    }
@@ -215,10 +221,12 @@
    }
 
    @Nullable
+   @Deprecated // Use ItemStack sensitive version.
    public final Item getRecipeRemainder() {
       return this.recipeRemainder;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public boolean hasRecipeRemainder() {
       return this.recipeRemainder != null;
    }
@@ -279,7 +287,7 @@
    }
 
    public boolean isEnchantable(ItemStack stack) {
-      return this.getMaxCount() == 1 && this.isDamageable();
+      return this.getItemStackLimit(stack) == 1 && this.isDamageable();
    }
 
    protected static HitResult rayTrace(World worldIn, PlayerEntity player, RayTraceContext.FluidHandling fluidMode) {
@@ -292,8 +300,8 @@
       float f5 = MathHelper.sin(-f * ((float)Math.PI / 180F));
       float f6 = f3 * f4;
       float f7 = f2 * f4;
-      double d0 = 5.0D;
-      Vec3d vec3d1 = vec3d.add((double)f6 * 5.0D, (double)f5 * 5.0D, (double)f7 * 5.0D);
+      double d0 = player.getAttributeInstance(PlayerEntity.REACH_DISTANCE).getValue();;
+      Vec3d vec3d1 = vec3d.add((double)f6 * d0, (double)f5 * d0, (double)f7 * d0);
       return worldIn.rayTrace(new RayTraceContext(vec3d, vec3d1, RayTraceContext.ShapeType.OUTLINE, fluidMode, player));
    }
 
@@ -309,6 +317,7 @@
    }
 
    protected boolean isIn(ItemGroup group) {
+      if (getCreativeTabs().stream().anyMatch(tab -> tab == group)) return true;
       ItemGroup itemgroup = this.getGroup();
       return itemgroup != null && (group == ItemGroup.SEARCH || group == itemgroup);
    }
@@ -322,10 +331,44 @@
       return false;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public Multimap<String, EntityAttributeModifier> getModifiers(EquipmentSlot equipmentSlot) {
       return HashMultimap.create();
    }
 
+   @Nullable
+   private final java.util.function.Supplier<net.minecraft.client.render.item.ItemDynamicRenderer> teisr;
+   private final java.util.Map<net.minecraftforge.common.ToolType, Integer> toolClasses = Maps.newHashMap();
+   private final net.minecraftforge.common.util.ReverseTagWrapper<Item> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, net.minecraft.tag.ItemTags::getGeneration, net.minecraft.tag.ItemTags::getContainer);
+   protected final boolean canRepair;
+
+   @Override
+   public boolean isRepairable(ItemStack stack) {
+     return canRepair && isDamageable();
+   }
+
+   @Override
+   public java.util.Set<net.minecraftforge.common.ToolType> getToolTypes(ItemStack stack) {
+     return toolClasses.keySet();
+   }
+
+   @Override
+   public int getHarvestLevel(ItemStack stack, net.minecraftforge.common.ToolType tool, @Nullable PlayerEntity player, @Nullable BlockState blockState) {
+     return toolClasses.getOrDefault(tool, -1);
+   }
+
+   @OnlyIn(Dist.CLIENT)
+   @Override
+   public final net.minecraft.client.render.item.ItemDynamicRenderer getTileEntityItemStackRenderer() {
+     net.minecraft.client.render.item.ItemDynamicRenderer renderer = teisr != null ? teisr.get() : null;
+     return renderer != null ? renderer : net.minecraft.client.render.item.ItemDynamicRenderer.INSTANCE;
+   }
+
+   @Override
+   public java.util.Set<Identifier> getTags() {
+      return reverseTags.getTagNames();
+   }
+
    public boolean isUsedOnRelease(ItemStack stack) {
       return stack.getItem() == Items.CROSSBOW;
    }
@@ -355,6 +398,9 @@
       private ItemGroup group;
       private Rarity rarity = Rarity.COMMON;
       private FoodComponent foodComponent;
+      private boolean canRepair = true;
+      private java.util.Map<net.minecraftforge.common.ToolType, Integer> toolClasses = Maps.newHashMap();
+      private java.util.function.Supplier<java.util.concurrent.Callable<net.minecraft.client.render.item.ItemDynamicRenderer>> teisr;
 
       public Item.Settings food(FoodComponent foodIn) {
          this.foodComponent = foodIn;
@@ -394,5 +440,20 @@
          this.rarity = rarityIn;
          return this;
       }
+
+      public Item.Settings setNoRepair() {
+         canRepair = false;
+         return this;
+      }
+
+      public Item.Settings addToolType(net.minecraftforge.common.ToolType type, int level) {
+         toolClasses.put(type, level);
+         return this;
+      }
+
+      public Item.Settings setTEISR(java.util.function.Supplier<java.util.concurrent.Callable<net.minecraft.client.render.item.ItemDynamicRenderer>> teisr) {
+         this.teisr = teisr;
+         return this;
+      }
    }
 }
