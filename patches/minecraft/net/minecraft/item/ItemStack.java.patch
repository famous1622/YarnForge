--- a/net\minecraft\item\ItemStack.java
+++ b/net\minecraft\item\ItemStack.java
@@ -66,7 +66,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public final class ItemStack {
+public final class ItemStack extends net.minecraftforge.common.capabilities.CapabilityProvider<ItemStack> implements net.minecraftforge.common.extensions.IForgeItemStack {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final ItemStack EMPTY = new ItemStack((Item)null);
    public static final DecimalFormat MODIFIER_FORMAT = createModifierFormat();
@@ -82,6 +82,9 @@
    private CachedBlockPosition lastPlaceOnPos;
    private boolean lastPlaceOnResult;
 
+   private net.minecraftforge.registries.IRegistryDelegate<Item> delegate;
+   private CompoundTag capNBT;
+
    private static DecimalFormat createModifierFormat() {
       DecimalFormat decimalformat = new DecimalFormat("#.##");
       decimalformat.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
@@ -92,7 +95,10 @@
       this(itemIn, 1);
    }
 
-   public ItemStack(ItemConvertible itemIn, int count) {
+   public ItemStack(ItemConvertible itemIn, int count) { this(itemIn, count, null); }
+   public ItemStack(ItemConvertible itemIn, int count, @Nullable CompoundTag capNBT) {
+      super(ItemStack.class);
+      this.capNBT = capNBT;
       this.item = itemIn == null ? null : itemIn.asItem();
       this.count = count;
       if (this.item != null && this.item.isDamageable()) {
@@ -100,6 +106,7 @@
       }
 
       this.updateEmptyState();
+      this.forgeInit();
    }
 
    private void updateEmptyState() {
@@ -108,6 +115,8 @@
    }
 
    private ItemStack(CompoundTag compound) {
+      super(ItemStack.class);
+      this.capNBT = compound.contains("ForgeCaps") ? compound.getCompound("ForgeCaps") : null;
       this.item = Registry.field_11142.get(new Identifier(compound.getString("id")));
       this.count = compound.getByte("Count");
       if (compound.contains("tag", 10)) {
@@ -120,6 +129,7 @@
       }
 
       this.updateEmptyState();
+      this.forgeInit();
    }
 
    public static ItemStack fromTag(CompoundTag compound) {
@@ -134,7 +144,7 @@
    public boolean isEmpty() {
       if (this == EMPTY) {
          return true;
-      } else if (this.getItem() != null && this.getItem() != Items.AIR) {
+      } else if (this.getItemRaw() != null && this.getItemRaw() != Items.AIR) {
          return this.count <= 0;
       } else {
          return true;
@@ -150,10 +160,19 @@
    }
 
    public Item getItem() {
-      return this.empty ? Items.AIR : this.item;
+      return this.empty || this.delegate == null ? Items.AIR : this.delegate.get();
    }
 
    public ActionResult useOnBlock(ItemUsageContext context) {
+      if (!context.world.isClient) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(context);
+      return onItemUse(context, (c) -> getItem().useOnBlock(context));
+   }
+
+   public ActionResult onItemUseFirst(ItemUsageContext context) {
+      return onItemUse(context, (c) -> getItem().onItemUseFirst(this, context));
+   }
+
+   private ActionResult onItemUse(ItemUsageContext context, java.util.function.Function<ItemUsageContext, ActionResult> callback) {
       PlayerEntity playerentity = context.getPlayer();
       BlockPos blockpos = context.getBlockPos();
       CachedBlockPosition cachedblockinfo = new CachedBlockPosition(context.getWorld(), blockpos, false);
@@ -161,7 +180,7 @@
          return ActionResult.PASS;
       } else {
          Item item = this.getItem();
-         ActionResult actionresulttype = item.useOnBlock(context);
+         ActionResult actionresulttype = callback.apply(context);
          if (playerentity != null && actionresulttype == ActionResult.SUCCESS) {
             playerentity.incrementStat(Stats.field_15372.getOrCreateStat(item));
          }
@@ -189,12 +208,15 @@
       if (this.tag != null) {
          nbt.put("tag", this.tag.copy());
       }
-
+      CompoundTag cnbt = this.serializeCaps();
+      if (cnbt != null && !cnbt.isEmpty()) {
+         nbt.put("ForgeCaps", cnbt);
+      }
       return nbt;
    }
 
    public int getMaxCount() {
-      return this.getItem().getMaxCount();
+      return this.getItem().getItemStackLimit(this);
    }
 
    public boolean isStackable() {
@@ -202,7 +224,7 @@
    }
 
    public boolean isDamageable() {
-      if (!this.empty && this.getItem().getMaxDamage() > 0) {
+      if (!this.empty && this.getItem().getMaxDamage(this) > 0) {
          CompoundTag compoundnbt = this.getTag();
          return compoundnbt == null || !compoundnbt.getBoolean("Unbreakable");
       } else {
@@ -211,19 +233,19 @@
    }
 
    public boolean isDamaged() {
-      return this.isDamageable() && this.getDamage() > 0;
+      return this.isDamageable() && getItem().isDamaged(this);
    }
 
    public int getDamage() {
-      return this.tag == null ? 0 : this.tag.getInt("Damage");
+      return this.getItem().getDamage(this);
    }
 
    public void setDamage(int damage) {
-      this.getOrCreateTag().putInt("Damage", Math.max(0, damage));
+      this.getItem().setDamage(this, damage);
    }
 
    public int getMaxDamage() {
-      return this.getItem().getMaxDamage();
+      return this.getItem().getMaxDamage(this);
    }
 
    public boolean damage(int amount, Random rand, @Nullable ServerPlayerEntity damager) {
@@ -259,6 +281,7 @@
    public <T extends LivingEntity> void damage(int amount, T entityIn, Consumer<T> onBroken) {
       if (!entityIn.world.isClient && (!(entityIn instanceof PlayerEntity) || !((PlayerEntity)entityIn).abilities.creativeMode)) {
          if (this.isDamageable()) {
+            amount = this.getItem().damageItem(this, amount, entityIn, onBroken);
             if (this.damage(amount, entityIn.getRandom(), entityIn instanceof ServerPlayerEntity ? (ServerPlayerEntity)entityIn : null)) {
                onBroken.accept(entityIn);
                Item item = this.getItem();
@@ -291,7 +314,7 @@
    }
 
    public boolean isEffectiveOn(BlockState blockIn) {
-      return this.getItem().isEffectiveOn(blockIn);
+      return this.getItem().canHarvestBlock(this, blockIn);
    }
 
    public boolean useOnEntity(PlayerEntity playerIn, LivingEntity entityIn, Hand hand) {
@@ -302,7 +325,7 @@
       if (this.isEmpty()) {
          return EMPTY;
       } else {
-         ItemStack itemstack = new ItemStack(this.getItem(), this.count);
+         ItemStack itemstack = new ItemStack(this.getItem(), this.count, this.serializeCaps());
          itemstack.setCooldown(this.getCooldown());
          if (this.tag != null) {
             itemstack.tag = this.tag.copy();
@@ -319,7 +342,7 @@
          if (stackA.tag == null && stackB.tag != null) {
             return false;
          } else {
-            return stackA.tag == null || stackA.tag.equals(stackB.tag);
+            return stackA.tag == null || stackA.tag.equals(stackB.tag) && stackA.areCapsCompatible(stackB);
          }
       } else {
          return false;
@@ -342,7 +365,7 @@
       } else if (this.tag == null && other.tag != null) {
          return false;
       } else {
-         return this.tag == null || this.tag.equals(other.tag);
+         return this.tag == null || this.tag.equals(other.tag) && this.areCapsCompatible(other);
       }
    }
 
@@ -652,6 +675,7 @@
          }
       }
 
+      net.minecraftforge.event.ForgeEventFactory.onItemTooltip(this, playerIn, list, advanced);
       return list;
    }
 
@@ -772,7 +796,7 @@
             }
          }
       } else {
-         multimap = this.getItem().getModifiers(equipmentSlot);
+         multimap = this.getItem().getAttributeModifiers(equipmentSlot, this);
       }
 
       multimap.values().forEach((p_226631_0_) -> {
@@ -915,6 +939,35 @@
       return this.getItem().isFood();
    }
 
+   // FORGE START
+   public void deserializeNBT(CompoundTag nbt) {
+      final ItemStack itemStack = ItemStack.fromTag(nbt);
+      getStack().setTag(itemStack.getTag());
+      if (itemStack.capNBT != null) deserializeCaps(itemStack.capNBT);
+   }
+
+   /**
+    * Set up forge's ItemStack additions.
+    */
+   private void forgeInit() {
+      Item item = getItemRaw();
+      if (item != null) {
+         this.delegate = item.delegate;
+         net.minecraftforge.common.capabilities.ICapabilityProvider provider = item.initCapabilities(this, this.capNBT);
+         this.gatherCapabilities(provider);
+         if (this.capNBT != null) deserializeCaps(this.capNBT);
+      }
+   }
+
+   /**
+    * Internal call to get the actual item, not the delegate.
+    * In all other methods, FML replaces calls to this.item with the item delegate.
+    */
+   @Nullable
+   private Item getItemRaw() {
+       return this.item;
+   }
+
    public SoundEvent getDrinkSound() {
       return this.getItem().getDrinkSound();
    }
