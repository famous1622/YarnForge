--- a/net/minecraft/item/BucketItem.java
+++ b/net/minecraft/item/BucketItem.java
@@ -30,14 +30,28 @@
 public class BucketItem extends Item {
    private final Fluid fluid;
 
+   // Forge: Use the other constructor that takes a Supplier
+   @Deprecated
    public BucketItem(Fluid containedFluidIn, Item.Settings builder) {
       super(builder);
       this.fluid = containedFluidIn;
+      this.fluidSupplier = containedFluidIn.delegate;
+   }
+
+   /**
+    * @param supplier A fluid supplier such as {@link net.minecraftforge.fml.RegistryObject<Fluid>}
+    */
+   public BucketItem(java.util.function.Supplier<? extends Fluid> supplier, Item.Settings builder) {
+      super(builder);
+      this.fluid = null;
+      this.fluidSupplier = supplier;
    }
 
    public TypedActionResult<ItemStack> use(World worldIn, PlayerEntity playerIn, Hand handIn) {
       ItemStack itemstack = playerIn.getStackInHand(handIn);
       HitResult raytraceresult = rayTrace(worldIn, playerIn, this.fluid == Fluids.EMPTY ? RayTraceContext.FluidHandling.SOURCE_ONLY : RayTraceContext.FluidHandling.NONE);
+      TypedActionResult<ItemStack> ret = net.minecraftforge.event.ForgeEventFactory.onBucketUse(playerIn, worldIn, itemstack, raytraceresult);
+      if (ret != null) return ret;
       if (raytraceresult.getType() == HitResult.Type.MISS) {
          return new TypedActionResult<>(ActionResult.PASS, itemstack);
       } else if (raytraceresult.getType() != HitResult.Type.BLOCK) {
@@ -52,7 +66,10 @@
                   Fluid fluid = ((FluidDrainable)blockstate1.getBlock()).tryDrainFluid(worldIn, blockpos, blockstate1);
                   if (fluid != Fluids.EMPTY) {
                      playerIn.incrementStat(Stats.USED.getOrCreateStat(this));
-                     playerIn.playSound(fluid.matches(FluidTags.LAVA) ? SoundEvents.ITEM_BUCKET_FILL_LAVA : SoundEvents.ITEM_BUCKET_FILL, 1.0F, 1.0F);
+
+                     SoundEvent soundevent = this.fluid.getAttributes().getEmptySound();
+                     if(soundevent == null) soundevent = fluid.matches(FluidTags.LAVA) ? SoundEvents.ITEM_BUCKET_FILL_LAVA : SoundEvents.ITEM_BUCKET_FILL;
+                     playerIn.playSound(soundevent, 1.0F, 1.0F);
                      ItemStack itemstack1 = this.getFilledStack(itemstack, playerIn, fluid.getBucketItem());
                      if (!worldIn.isClient) {
                         Criterions.FILLED_BUCKET.handle((ServerPlayerEntity)playerIn, new ItemStack(fluid.getBucketItem()));
@@ -147,7 +164,19 @@
    }
 
    protected void playEmptyingSound(@Nullable PlayerEntity player, IWorld worldIn, BlockPos pos) {
-      SoundEvent soundevent = this.fluid.matches(FluidTags.LAVA) ? SoundEvents.ITEM_BUCKET_EMPTY_LAVA : SoundEvents.ITEM_BUCKET_EMPTY;
+      SoundEvent soundevent = this.fluid.getAttributes().getEmptySound();
+      if(soundevent == null) soundevent = this.fluid.matches(FluidTags.LAVA) ? SoundEvents.ITEM_BUCKET_EMPTY_LAVA : SoundEvents.ITEM_BUCKET_EMPTY;
       worldIn.playSound(player, pos, soundevent, SoundCategory.BLOCKS, 1.0F, 1.0F);
    }
+
+   @Override
+   public net.minecraftforge.common.capabilities.ICapabilityProvider initCapabilities(ItemStack stack, @Nullable net.minecraft.nbt.CompoundTag nbt) {
+      if (this.getClass() == BucketItem.class)
+         return new net.minecraftforge.fluids.capability.wrappers.FluidBucketWrapper(stack);
+      else
+         return super.initCapabilities(stack, nbt);
+   }
+
+   private final java.util.function.Supplier<? extends Fluid> fluidSupplier;
+   public Fluid getFluid() { return fluidSupplier.get(); }
 }
