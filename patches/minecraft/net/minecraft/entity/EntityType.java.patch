--- a/net\minecraft\entity\EntityType.java
+++ b/net\minecraft\entity\EntityType.java
@@ -129,7 +129,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class EntityType<T extends Entity> {
+public class EntityType<T extends Entity> extends net.minecraftforge.registries.ForgeRegistryEntry<EntityType<?>> {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final EntityType<AreaEffectCloudEntity> field_6083 = register("area_effect_cloud", EntityType.Builder.<AreaEffectCloudEntity>create(AreaEffectCloudEntity::new, EntityCategory.field_17715).makeFireImmune().setDimensions(6.0F, 0.5F));
    public static final EntityType<ArmorStandEntity> field_6131 = register("armor_stand", EntityType.Builder.<ArmorStandEntity>create(ArmorStandEntity::new, EntityCategory.field_17715).setDimensions(0.5F, 1.975F));
@@ -248,6 +248,12 @@
    private Identifier lootTableId;
    private final EntityDimensions dimensions;
 
+   private final java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier;
+   private final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier;
+   private final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier;
+   private final java.util.function.BiFunction<net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity, World, T> customClientFactory;
+   private final net.minecraftforge.common.util.ReverseTagWrapper<EntityType<?>> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, net.minecraft.tag.EntityTypeTags::getGeneration, net.minecraft.tag.EntityTypeTags::getContainer);
+
    private static <T extends Entity> EntityType<T> register(String key, EntityType.Builder<T> builder) {
       return Registry.register(Registry.field_11145, key, builder.build(key));
    }
@@ -260,7 +266,11 @@
       return Registry.field_11145.getOrEmpty(Identifier.tryParse(key));
    }
 
+
    public EntityType(EntityType.EntityFactory<T> factoryIn, EntityCategory classificationIn, boolean serializableIn, boolean summonableIn, boolean immuneToFireIn, boolean p_i51559_6_, EntityDimensions sizeIn) {
+      this(factoryIn, classificationIn, serializableIn, summonableIn, immuneToFireIn, p_i51559_6_, sizeIn, EntityType::defaultVelocitySupplier, EntityType::defaultTrackingRangeSupplier, EntityType::defaultUpdateIntervalSupplier, null);
+   }
+   public EntityType(EntityType.EntityFactory<T> factoryIn, EntityCategory classificationIn, boolean serializableIn, boolean summonableIn, boolean immuneToFireIn, boolean p_i51559_6_, EntityDimensions sizeIn, final java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier, final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier, final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier, final java.util.function.BiFunction<net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity, World, T> customClientFactory) {
       this.factory = factoryIn;
       this.category = classificationIn;
       this.spawnableFarFromPlayer = p_i51559_6_;
@@ -268,6 +278,10 @@
       this.summonable = summonableIn;
       this.fireImmune = immuneToFireIn;
       this.dimensions = sizeIn;
+      this.velocityUpdateSupplier = velocityUpdateSupplier;
+      this.trackingRangeSupplier = trackingRangeSupplier;
+      this.updateIntervalSupplier = updateIntervalSupplier;
+      this.customClientFactory = customClientFactory;
    }
 
    @Nullable
@@ -278,6 +292,7 @@
    @Nullable
    public T spawn(World worldIn, @Nullable CompoundTag compound, @Nullable Text customName, @Nullable PlayerEntity playerIn, BlockPos pos, SpawnType reason, boolean p_220342_7_, boolean p_220342_8_) {
       T t = this.create(worldIn, compound, customName, playerIn, pos, reason, p_220342_7_, p_220342_8_);
+      if (t instanceof net.minecraft.entity.mob.MobEntity && net.minecraftforge.event.ForgeEventFactory.doSpecialSpawn((net.minecraft.entity.mob.MobEntity) t, worldIn, pos.getX(), pos.getY(), pos.getZ(), null, reason)) return null;
       worldIn.spawnEntity(t);
       return t;
    }
@@ -460,6 +475,9 @@
    }
 
    public int getMaxTrackDistance() {
+      return trackingRangeSupplier.applyAsInt(this);
+   }
+   private int defaultTrackingRangeSupplier() {
       if (this == field_6097) {
          return 32;
       } else if (this == field_6110) {
@@ -472,6 +490,9 @@
    }
 
    public int getTrackTickInterval() {
+      return updateIntervalSupplier.applyAsInt(this);
+   }
+   private int defaultUpdateIntervalSupplier() {
       if (this != field_6097 && this != field_6060) {
          if (this == field_6061) {
             return 4;
@@ -492,6 +513,9 @@
    }
 
    public boolean alwaysUpdateVelocity() {
+      return velocityUpdateSupplier.test(this);
+   }
+   private boolean defaultVelocitySupplier() {
       return this != field_6097 && this != field_6124 && this != field_6119 && this != field_6108 && this != field_6043 && this != field_6138 && this != field_6120 && this != field_6110 && this != field_6060;
    }
 
@@ -499,12 +523,30 @@
       return tagIn.contains(this);
    }
 
+   public T customClientSpawn(net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity packet, World world) {
+      if (customClientFactory == null) return this.create(world);
+      return customClientFactory.apply(packet, world);
+   }
+
+   /**
+    * Retrieves a list of tags names this is known to be associated with.
+    * This should be used in favor of TagCollection.getOwningTags, as this caches the result and automatically updates when the TagCollection changes.
+    */
+   public java.util.Set<Identifier> getTags() {
+      return reverseTags.getTagNames();
+   }
+
    public static class Builder<T extends Entity> {
       private final EntityType.EntityFactory<T> factory;
       private final EntityCategory category;
       private boolean saveable = true;
       private boolean summonable = true;
       private boolean fireImmune;
+      private java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier = EntityType::defaultVelocitySupplier;
+      private java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier = EntityType::defaultTrackingRangeSupplier;
+      private java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier = EntityType::defaultUpdateIntervalSupplier;
+      private java.util.function.BiFunction<net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity, World, T> customClientFactory;
+
       private boolean spawnableFarFromPlayer;
       private EntityDimensions size = EntityDimensions.changing(0.6F, 1.8F);
 
@@ -549,11 +591,35 @@
          return this;
       }
 
+      public EntityType.Builder<T> setUpdateInterval(int interval) {
+         this.updateIntervalSupplier = t->interval;
+         return this;
+      }
+
+      public EntityType.Builder<T> setTrackingRange(int range) {
+         this.trackingRangeSupplier = t->range;
+         return this;
+      }
+
+      public EntityType.Builder<T> setShouldReceiveVelocityUpdates(boolean value) {
+         this.velocityUpdateSupplier = t->value;
+         return this;
+      }
+
+      /**
+       * By default, entities are spawned clientside via {@link EntityType#create(World)}.
+       * If you need finer control over the spawning process, use this to get read access to the spawn packet.
+       */
+      public EntityType.Builder<T> setCustomClientFactory(java.util.function.BiFunction<net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity, World, T> customClientFactory) {
+         this.customClientFactory = customClientFactory;
+         return this;
+      }
+
       public EntityType<T> build(String id) {
          if (this.saveable) {
             try {
                Schemas.getFixer().getSchema(DataFixUtils.makeKey(SharedConstants.getGameVersion().getWorldVersion())).getChoiceType(TypeReferences.ENTITY_TREE, id);
-            } catch (IllegalStateException illegalstateexception) {
+            } catch (IllegalArgumentException illegalstateexception) { // Forge: fix catching wrong exception
                if (SharedConstants.isDevelopment) {
                   throw illegalstateexception;
                }
@@ -562,7 +628,7 @@
             }
          }
 
-         return new EntityType<>(this.factory, this.category, this.saveable, this.summonable, this.fireImmune, this.spawnableFarFromPlayer, this.size);
+         return new EntityType<>(this.factory, this.category, this.saveable, this.summonable, this.fireImmune, this.spawnableFarFromPlayer, this.size, velocityUpdateSupplier, trackingRangeSupplier, updateIntervalSupplier, customClientFactory);
       }
    }
 
