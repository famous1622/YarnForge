--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -21,7 +21,6 @@
 import net.minecraft.block.BlockRenderType;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
-import net.minecraft.block.FenceGateBlock;
 import net.minecraft.block.PortalBlock;
 import net.minecraft.sound.BlockSoundGroup;
 import net.minecraft.block.piston.PistonBehavior;
@@ -55,7 +54,6 @@
 import net.minecraft.scoreboard.Team;
 import net.minecraft.scoreboard.AbstractTeam;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.tag.BlockTags;
 import net.minecraft.tag.FluidTags;
 import net.minecraft.tag.Tag;
 import net.minecraft.util.ActionResult;
@@ -100,12 +98,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class Entity implements Nameable, CommandOutput {
+public abstract class Entity extends net.minecraftforge.common.capabilities.CapabilityProvider<Entity> implements Nameable, CommandOutput, net.minecraftforge.common.extensions.IForgeEntity {
    protected static final Logger LOGGER = LogManager.getLogger();
    private static final AtomicInteger MAX_ENTITY_ID = new AtomicInteger();
    private static final List<ItemStack> EMPTY_STACK_LIST = Collections.emptyList();
    private static final Box NULL_BOX = new Box(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
    private static double renderDistanceMultiplier = 1.0D;
+   @Deprecated // Forge: Use the getter to allow overriding in mods
    private final EntityType<?> type;
    private int entityId = MAX_ENTITY_ID.incrementAndGet();
    public boolean inanimate;
@@ -132,6 +131,7 @@
    public boolean collided;
    public boolean velocityModified;
    protected Vec3d movementMultiplier = Vec3d.ZERO;
+   @Deprecated //Forge: Use isAlive, remove(boolean) and revive() instead of directly accessing this field. To allow the entity to react to and better control this information.
    public boolean removed;
    public float prevHorizontalSpeed;
    public float horizontalSpeed;
@@ -193,6 +193,7 @@
    private float standingEyeHeight;
 
    public Entity(EntityType<?> entityTypeIn, World worldIn) {
+      super(Entity.class);
       this.type = entityTypeIn;
       this.world = worldIn;
       this.dimensions = entityTypeIn.getDimensions();
@@ -210,7 +211,9 @@
       this.dataTracker.startTracking(NO_GRAVITY, false);
       this.dataTracker.startTracking(POSE, EntityPose.STANDING);
       this.initDataTracker();
-      this.standingEyeHeight = this.getEyeHeight(EntityPose.STANDING, this.dimensions);
+      this.standingEyeHeight = getEyeHeightForge(EntityPose.STANDING, this.dimensions);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EntityConstructing(this));
+      this.gatherCapabilities();
    }
 
    public boolean isSpectator() {
@@ -299,7 +302,13 @@
    }
 
    public void remove() {
+      this.remove(false);
+   }
+
+   public void remove(boolean keepData) {
       this.removed = true;
+      if (!keepData)
+         this.invalidateCaps();
    }
 
    protected void setPose(EntityPose p_213301_1_) {
@@ -319,6 +328,7 @@
       this.x = x;
       this.y = y;
       this.z = z;
+      if (this.isAddedToWorld() && !this.world.isClient && world instanceof ServerWorld) ((ServerWorld)this.world).checkChunk(this); // Forge - Process chunk registration after moving.
       float f = this.dimensions.width / 2.0F;
       float f1 = this.dimensions.height;
       this.setBoundingBox(new Box(x - (double)f, y, z - (double)f, x + (double)f, y + (double)f1, z + (double)f));
@@ -492,11 +502,11 @@
          int k = MathHelper.floor(this.z);
          BlockPos blockpos = new BlockPos(i, j, k);
          BlockState blockstate = this.world.getBlockState(blockpos);
-         if (blockstate.isAir()) {
+         if (blockstate.isAir(this.world, blockpos)) {
             BlockPos blockpos1 = blockpos.down();
             BlockState blockstate1 = this.world.getBlockState(blockpos1);
             Block block = blockstate1.getBlock();
-            if (block.matches(BlockTags.FENCES) || block.matches(BlockTags.WALLS) || block instanceof FenceGateBlock) {
+            if (blockstate.collisionExtendsVertically(this.world, blockpos, this)) {
                blockstate = blockstate1;
                blockpos = blockpos1;
             }
@@ -531,7 +541,7 @@
 
             this.horizontalSpeed = (float)((double)this.horizontalSpeed + (double)MathHelper.sqrt(squaredHorizontalLength(vec3d)) * 0.6D);
             this.distanceWalked = (float)((double)this.distanceWalked + (double)MathHelper.sqrt(d2 * d2 + d0 * d0 + d1 * d1) * 0.6D);
-            if (this.distanceWalked > this.nextStepDistance && !blockstate.isAir()) {
+            if (this.distanceWalked > this.nextStepDistance && !blockstate.isAir(this.world, blockpos)) {
                this.nextStepDistance = this.calculateStepDelta();
                if (this.isInsideWater()) {
                   Entity entity = this.hasPassengers() && this.getPrimaryPassenger() != null ? this.getPrimaryPassenger() : this;
@@ -546,7 +556,7 @@
                } else {
                   this.playStepSound(blockpos, blockstate);
                }
-            } else if (this.distanceWalked > this.aerialStepDelta && this.method_5776() && blockstate.isAir()) {
+            } else if (this.distanceWalked > this.aerialStepDelta && this.method_5776() && blockstate.isAir(this.world, blockpos)) {
                this.aerialStepDelta = this.calculateAerialStepDelta(this.distanceWalked);
             }
          }
@@ -788,6 +798,7 @@
       this.x = (axisalignedbb.minX + axisalignedbb.maxX) / 2.0D;
       this.y = axisalignedbb.minY;
       this.z = (axisalignedbb.minZ + axisalignedbb.maxZ) / 2.0D;
+      if (this.isAddedToWorld() && !this.world.isClient && world instanceof ServerWorld) ((ServerWorld)this.world).checkChunk(this); // Forge - Process chunk registration after moving.
    }
 
    protected SoundEvent getSwimSound() {
@@ -840,7 +851,7 @@
    protected void playStepSound(BlockPos pos, BlockState blockIn) {
       if (!blockIn.getMaterial().isLiquid()) {
          BlockState blockstate = this.world.getBlockState(pos.up());
-         BlockSoundGroup soundtype = blockstate.getBlock() == Blocks.SNOW ? blockstate.getSoundGroup() : blockIn.getSoundGroup();
+         BlockSoundGroup soundtype = blockstate.getBlock() == Blocks.SNOW ? blockstate.getSoundType(world, pos, this) : blockIn.getSoundType(world, pos, this);
          this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
       }
    }
@@ -1036,9 +1047,10 @@
       int k = MathHelper.floor(this.z);
       BlockPos blockpos = new BlockPos(i, j, k);
       BlockState blockstate = this.world.getBlockState(blockpos);
+      if (!blockstate.addRunningEffects(world, blockpos, this))
       if (blockstate.getRenderType() != BlockRenderType.INVISIBLE) {
          Vec3d vec3d = this.getVelocity();
-         this.world.addParticle(new BlockStateParticleEffect(ParticleTypes.BLOCK, blockstate), this.x + ((double)this.random.nextFloat() - 0.5D) * (double)this.dimensions.width, this.y + 0.1D, this.z + ((double)this.random.nextFloat() - 0.5D) * (double)this.dimensions.width, vec3d.x * -4.0D, 1.5D, vec3d.z * -4.0D);
+         this.world.addParticle(new BlockStateParticleEffect(ParticleTypes.BLOCK, blockstate).setPos(blockpos), this.x + ((double)this.random.nextFloat() - 0.5D) * (double)this.dimensions.width, this.y + 0.1D, this.z + ((double)this.random.nextFloat() - 0.5D) * (double)this.dimensions.width, vec3d.x * -4.0D, 1.5D, vec3d.z * -4.0D);
       }
 
    }
@@ -1057,7 +1069,7 @@
             return false;
          } else {
             FluidState ifluidstate = this.world.getFluidState(blockpos);
-            return ifluidstate.matches(p_213290_1_) && d0 < (double)((float)blockpos.getY() + ifluidstate.getHeight(this.world, blockpos) + 0.11111111F);
+            return ifluidstate.isEntityInside(world, blockpos, this, d0, p_213290_1_, true);
          }
       }
    }
@@ -1128,6 +1140,7 @@
          this.prevYaw -= 360.0F;
       }
 
+      if (!this.world.isClient && this.isAlive()) this.world.getChunk((int) Math.floor(this.x) >> 4, (int) Math.floor(this.z) >> 4); // Forge - ensure target chunk is loaded.
       this.setPosition(this.x, this.y, this.z);
       this.setRotation(yaw, pitch);
    }
@@ -1364,6 +1377,7 @@
          if (this.glowing) {
             compound.putBoolean("Glowing", this.glowing);
          }
+         compound.putBoolean("CanUpdate", canUpdate);
 
          if (!this.scoreboardTags.isEmpty()) {
             ListTag listnbt = new ListTag();
@@ -1375,6 +1389,10 @@
             compound.put("Tags", listnbt);
          }
 
+         CompoundTag caps = serializeCaps();
+         if (caps != null) compound.put("ForgeCaps", caps);
+         if (persistentData != null) compound.put("ForgeData", persistentData);
+
          this.writeCustomDataToTag(compound);
          if (this.hasPassengers()) {
             ListTag listnbt1 = new ListTag();
@@ -1451,6 +1469,9 @@
                this.setSilent(compound.getBoolean("Silent"));
                this.setNoGravity(compound.getBoolean("NoGravity"));
                this.setGlowing(compound.getBoolean("Glowing"));
+               if (compound.containsKey("ForgeData", 10)) persistentData = compound.getCompound("ForgeData");
+               if (compound.containsKey("CanUpdate", 99)) this.canUpdate(compound.getBoolean("CanUpdate"));
+               if (compound.containsKey("ForgeCaps", 10)) deserializeCaps(compound.getCompound("ForgeCaps"));
                if (compound.containsKey("Tags", 9)) {
                   this.scoreboardTags.clear();
                   ListTag listnbt1 = compound.getList("Tags", 8);
@@ -1539,6 +1560,8 @@
       } else {
          ItemEntity itementity = new ItemEntity(this.world, this.x, this.y + (double)offsetY, this.z, stack);
          itementity.setToDefaultPickupDelay();
+         if (captureDrops() != null) captureDrops().add(itementity);
+         else
          this.world.spawnEntity(itementity);
          return itementity;
       }
@@ -1582,6 +1605,7 @@
 
    public void tickRiding() {
       this.setVelocity(Vec3d.ZERO);
+      if (canUpdate())
       this.tick();
       if (this.hasVehicle()) {
          this.getVehicle().updatePassengerPosition(this);
@@ -1622,6 +1646,7 @@
          }
       }
 
+      if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entityIn, true)) return false;
       if (force || this.canStartRiding(entityIn) && entityIn.canAddPassenger(this)) {
          if (this.hasVehicle()) {
             this.stopRiding();
@@ -1653,6 +1678,7 @@
    public void stopRiding() {
       if (this.vehicle != null) {
          Entity entity = this.vehicle;
+         if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
          this.vehicle = null;
          entity.removePassenger(this);
       }
@@ -1803,6 +1829,7 @@
       return !this.getPassengerList().isEmpty();
    }
 
+   @Deprecated //Forge: Use rider sensitive version
    public boolean canBeRiddenInWater() {
       return true;
    }
@@ -2001,7 +2028,7 @@
          removeClickEvents(itextcomponent1);
          return itextcomponent1;
       } else {
-         return this.type.getName();
+         return this.getType().getName(); // Forge: Use getter to allow overriding by mods
       }
    }
 
@@ -2059,6 +2086,7 @@
 
    @Nullable
    public Entity changeDimension(DimensionType destination) {
+      if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, destination)) return null;
       if (!this.world.isClient && !this.removed) {
          this.world.getProfiler().push("changeDimension");
          MinecraftServer minecraftserver = this.getServer();
@@ -2076,16 +2104,9 @@
          } else if (destination == DimensionType.THE_END) {
             blockpos = serverworld1.getForcedSpawnPoint();
          } else {
-            double d0 = this.x;
-            double d1 = this.z;
-            double d2 = 8.0D;
-            if (dimensiontype == DimensionType.OVERWORLD && destination == DimensionType.THE_NETHER) {
-               d0 /= 8.0D;
-               d1 /= 8.0D;
-            } else if (dimensiontype == DimensionType.THE_NETHER && destination == DimensionType.OVERWORLD) {
-               d0 *= 8.0D;
-               d1 *= 8.0D;
-            }
+            double movementFactor = serverworld.getDimension().getMovementFactor() / serverworld1.getDimension().getMovementFactor();
+            double d0 = this.x * movementFactor;
+            double d1 = this.z * movementFactor;
 
             double d3 = Math.min(-2.9999872E7D, serverworld1.getWorldBorder().getBoundWest() + 16.0D);
             double d4 = Math.min(-2.9999872E7D, serverworld1.getWorldBorder().getBoundNorth() + 16.0D);
@@ -2114,7 +2135,7 @@
             serverworld1.method_18769(entity);
          }
 
-         this.removed = true;
+         this.remove(false);
          this.world.getProfiler().pop();
          serverworld.resetIdleTimeout();
          serverworld1.resetIdleTimeout();
@@ -2142,10 +2163,12 @@
    }
 
    public Vec3d getLastPortalDirectionVector() {
+      if (this.lastPortalDirectionVector == null) return Vec3d.ZERO;
       return this.lastPortalDirectionVector;
    }
 
    public Direction getLastPortalDirection() {
+      if (this.lastPortalDirection == null) return Direction.NORTH;
       return this.lastPortalDirection;
    }
 
@@ -2270,7 +2293,7 @@
       EntityPose pose = this.getPose();
       EntityDimensions entitysize1 = this.getDimensions(pose);
       this.dimensions = entitysize1;
-      this.standingEyeHeight = this.getEyeHeight(pose, entitysize1);
+      this.standingEyeHeight = getEyeHeightForge(pose, entitysize1);
       if (entitysize1.width < entitysize.width) {
          double d0 = (double)entitysize1.width / 2.0D;
          this.setBoundingBox(new Box(this.x - d0, this.y, this.z - d0, this.x + d0, this.y + (double)entitysize1.height, this.z + d0));
@@ -2637,6 +2660,7 @@
       return this.waterHeight;
    }
 
+
    public final float getWidth() {
       return this.dimensions.width;
    }
@@ -2666,4 +2690,69 @@
    public void setVelocity(double p_213293_1_, double p_213293_3_, double p_213293_5_) {
       this.setVelocity(new Vec3d(p_213293_1_, p_213293_3_, p_213293_5_));
    }
+
+   /* ================================== Forge Start =====================================*/
+
+   private boolean canUpdate = true;
+   @Override
+   public void canUpdate(boolean value) {
+      this.canUpdate = value;
+   }
+   @Override
+   public boolean canUpdate() {
+      return this.canUpdate;
+   }
+   private Collection<ItemEntity> captureDrops = null;
+   @Override
+   public Collection<ItemEntity> captureDrops() {
+      return captureDrops;
+   }
+   @Override
+   public Collection<ItemEntity> captureDrops(Collection<ItemEntity> value) {
+      Collection<ItemEntity> ret = captureDrops;
+      this.captureDrops = value;
+      return ret;
+   }
+   private CompoundTag persistentData;
+   @Override
+   public CompoundTag getPersistentData() {
+      if (persistentData == null)
+         persistentData = new CompoundTag();
+      return persistentData;
+   }
+   @Override
+   public boolean canTrample(BlockState state, BlockPos pos, float fallDistance) {
+      return world.random.nextFloat() < fallDistance - 0.5F
+              && this instanceof LivingEntity
+              && (this instanceof PlayerEntity || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(world, this))
+              && this.getWidth() * this.getWidth() * this.getHeight() > 0.512F;
+   }
+
+   /**
+    * Internal use for keeping track of entities that are tracked by a world, to
+    * allow guarantees that entity position changes will force a chunk load, avoiding
+    * potential issues with entity desyncing and bad chunk data.
+    */
+   private boolean isAddedToWorld;
+
+   @Override
+   public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+   @Override
+   public void onAddedToWorld() { this.isAddedToWorld = true; }
+
+   @Override
+   public void onRemovedFromWorld() { this.isAddedToWorld = false; }
+
+   @Override
+   public void revive() {
+      this.removed = false;
+      this.reviveCaps();
+   }
+
+   private float getEyeHeightForge(EntityPose pose, EntityDimensions size) {
+      net.minecraftforge.event.entity.EntityEvent.EyeHeight evt = new net.minecraftforge.event.entity.EntityEvent.EyeHeight(this, pose, size, this.getEyeHeight(pose, size));
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(evt);
+      return evt.getNewHeight();
+   }
 }
