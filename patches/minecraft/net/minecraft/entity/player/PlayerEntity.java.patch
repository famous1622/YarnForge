--- a/net/minecraft/entity/player/PlayerEntity.java
+++ b/net/minecraft/entity/player/PlayerEntity.java
@@ -14,8 +14,6 @@
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.advancement.criterion.Criterions;
-import net.minecraft.block.BedBlock;
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.HorizontalFacingBlock;
 import net.minecraft.enchantment.EnchantmentHelper;
@@ -46,7 +44,6 @@
 import net.minecraft.container.NameableContainerProvider;
 import net.minecraft.container.PlayerContainer;
 import net.minecraft.item.ArmorItem;
-import net.minecraft.item.AxeItem;
 import net.minecraft.item.ElytraItem;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
@@ -104,11 +101,16 @@
 import net.minecraft.server.world.ServerWorld;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+
+import net.minecraft;
 import net.minecraft.client.render.entity.PlayerModelPart;
 import net.minecraft.server.network.ServerPlayerEntity;
 
-
 public abstract class PlayerEntity extends LivingEntity {
+   public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
+   protected java.util.HashMap<Identifier, BlockPos> spawnPosMap = new java.util.HashMap<>();
+   protected java.util.HashMap<Identifier, Boolean> spawnForcedMap = new java.util.HashMap<>();
+   public static final net.minecraft.entity.attribute.EntityAttribute REACH_DISTANCE = new net.minecraft.entity.attribute.ClampedEntityAttribute(null, "generic.reachDistance", 5.0D, 0.0D, 1024.0D).setTracked(true);
    public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.changing(0.6F, 1.8F);
    private static final Map<EntityPose, EntityDimensions> POSE_DIMENSIONS = ImmutableMap.<EntityPose, EntityDimensions>builder().put(EntityPose.STANDING, STANDING_DIMENSIONS).put(EntityPose.SLEEPING, SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SNEAKING, EntityDimensions.changing(0.6F, 1.5F)).put(EntityPose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
    private static final TrackedData<Float> ABSORPTION_AMOUNT = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.FLOAT);
@@ -151,6 +153,9 @@
    private final ItemCooldownManager itemCooldownManager = this.createCooldownManager();
    @Nullable
    public FishingBobberEntity fishHook;
+   private net.minecraft.world.dimension.DimensionType spawnDimension = net.minecraft.world.dimension.DimensionType.OVERWORLD;
+   private final java.util.Collection<Text> prefixes = new java.util.LinkedList<Text>();
+   private final java.util.Collection<Text> suffixes = new java.util.LinkedList<Text>();
 
    public PlayerEntity(World worldIn, GameProfile gameProfileIn) {
       super(EntityType.PLAYER, worldIn);
@@ -182,6 +187,7 @@
       this.getAttributeInstance(EntityAttributes.MOVEMENT_SPEED).setBaseValue((double)0.1F);
       this.getAttributeContainer().register(EntityAttributes.ATTACK_SPEED);
       this.getAttributeContainer().register(EntityAttributes.LUCK);
+      this.getAttributeContainer().register(REACH_DISTANCE);
    }
 
    protected void initDataTracker() {
@@ -195,6 +201,7 @@
    }
 
    public void tick() {
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPlayerPreTick(this);
       this.noClip = this.isSpectator();
       if (this.isSpectator()) {
          this.onGround = false;
@@ -210,7 +217,7 @@
             this.sleepTimer = 100;
          }
 
-         if (!this.world.isClient && this.world.isDaylight()) {
+         if (!this.world.isClient && !net.minecraftforge.event.ForgeEventFactory.fireSleepingTimeCheck(this, getSleepingPosition())) {
             this.wakeUp(false, true, true);
          }
       } else if (this.sleepTimer > 0) {
@@ -268,6 +275,7 @@
       this.updateTurtleHelmet();
       this.itemCooldownManager.update();
       this.updateSize();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPlayerPostTick(this);
    }
 
    protected boolean updateInWater() {
@@ -442,10 +450,10 @@
          this.field_7505 = this.field_7483;
          this.field_7483 = 0.0F;
          this.method_7260(this.x - d0, this.y - d1, this.z - d2);
-         if (this.getVehicle() instanceof PigEntity) {
+         if (this.getVehicle() instanceof LivingEntity && ((LivingEntity)this.getVehicle()).shouldRiderFaceForward(this)) {
             this.pitch = f1;
             this.yaw = f;
-            this.field_6283 = ((PigEntity)this.getVehicle()).field_6283;
+            this.field_6283 = ((LivingEntity)this.getVehicle()).field_6283;
          }
 
       }
@@ -558,6 +566,7 @@
    }
 
    public void onDeath(DamageSource cause) {
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this,  cause)) return;
       super.onDeath(cause);
       this.setPosition(this.x, this.y, this.z);
       if (!this.isSpectator()) {
@@ -612,12 +621,14 @@
 
    @Nullable
    public ItemEntity dropSelectedItem(boolean dropAll) {
-      return this.dropItem(this.inventory.takeInvStack(this.inventory.selectedSlot, dropAll && !this.inventory.getMainHandStack().isEmpty() ? this.inventory.getMainHandStack().getCount() : 1), false, true);
+      ItemStack stack = inventory.getMainHandStack();
+      if (stack.isEmpty() || !stack.onDroppedByPlayer(this)) return null;
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, this.inventory.takeInvStack(this.inventory.selectedSlot, dropAll && !this.inventory.getMainHandStack().isEmpty() ? this.inventory.getMainHandStack().getCount() : 1), true);
    }
 
    @Nullable
    public ItemEntity dropItem(ItemStack itemStackIn, boolean unused) {
-      return this.dropItem(itemStackIn, false, unused);
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, itemStackIn, false);
    }
 
    @Nullable
@@ -651,7 +662,12 @@
       }
    }
 
+   @Deprecated //Use location sensitive version below
    public float getBlockBreakingSpeed(BlockState state) {
+      return getDigSpeed(state, null);
+   }
+
+   public float getDigSpeed(BlockState state, @Nullable BlockPos pos) {
       float f = this.inventory.getBlockBreakingSpeed(state);
       if (f > 1.0F) {
          int i = EnchantmentHelper.getEfficiency(this);
@@ -693,11 +709,12 @@
          f /= 5.0F;
       }
 
+      f = net.minecraftforge.event.ForgeEventFactory.getBreakSpeed(this, state, f, pos);
       return f;
    }
 
    public boolean isUsingEffectiveTool(BlockState state) {
-      return state.getMaterial().canBreakByHand() || this.inventory.isUsingEffectiveTool(state);
+      return net.minecraftforge.event.ForgeEventFactory.doPlayerHarvestCheck(this, state, state.getMaterial().canBreakByHand() || this.inventory.isUsingEffectiveTool(state));
    }
 
    public void readCustomDataFromTag(CompoundTag compound) {
@@ -721,6 +738,17 @@
          this.spawnForced = compound.getBoolean("SpawnForced");
       }
 
+      compound.getList("Spawns", 10).forEach(e -> {
+         CompoundTag data = (CompoundTag)e;
+         Identifier dim = new Identifier(data.getString("Dim"));
+         this.spawnPosMap.put(dim, new BlockPos(data.getInt("SpawnX"), data.getInt("SpawnY"), data.getInt("SpawnZ")));
+         this.spawnForcedMap.put(dim, data.getBoolean("SpawnForced"));
+      });
+      net.minecraft.world.dimension.DimensionType spawnDim = null;
+      if (compound.containsKey("SpawnDimension", net.minecraftforge.common.util.Constants.NBT.TAG_STRING))
+         spawnDim = net.minecraft.world.dimension.DimensionType.byId(new Identifier(compound.getString("SpawnDimension")));
+      this.spawnDimension = spawnDim != null ? spawnDim : net.minecraft.world.dimension.DimensionType.OVERWORLD;
+
       this.hungerManager.deserialize(compound);
       this.abilities.deserialize(compound);
       if (compound.containsKey("EnderItems", 9)) {
@@ -766,9 +794,26 @@
          compound.put("ShoulderEntityRight", this.getShoulderEntityRight());
       }
 
+      ListTag spawnlist = new ListTag();
+      spawnPosMap.forEach((dim, pos) -> {
+         if (pos != null) {
+            CompoundTag data = new CompoundTag();
+            data.putString("Dim", dim.toString());
+            data.putInt("SpawnX", pos.getX());
+            data.putInt("SpawnY", pos.getY());
+            data.putInt("SpawnZ", pos.getZ());
+            data.putBoolean("SpawnForced", spawnForcedMap.getOrDefault(dim, false));
+            spawnlist.add(data);
+         }
+      });
+      compound.put("Spawns", spawnlist);
+      if (spawnDimension != net.minecraft.world.dimension.DimensionType.OVERWORLD) {
+         compound.putString("SpawnDimension", spawnDimension.getRegistryName().toString());
+      }
    }
 
    public boolean damage(DamageSource source, float amount) {
+      if (!net.minecraftforge.common.ForgeHooks.onPlayerAttack(this, source, amount)) return false;
       if (this.isInvulnerableTo(source)) {
          return false;
       } else if (this.abilities.invulnerable && !source.doesDamageToCreative()) {
@@ -800,7 +845,7 @@
 
    protected void takeShieldHit(LivingEntity p_190629_1_) {
       super.takeShieldHit(p_190629_1_);
-      if (p_190629_1_.getMainHandStack().getItem() instanceof AxeItem) {
+      if (p_190629_1_.getMainHandStack().canDisableShield(this.activeItemStack, this, p_190629_1_)) {
          this.disableShield(true);
       }
 
@@ -821,11 +866,12 @@
    }
 
    protected void damageShield(float damage) {
-      if (damage >= 3.0F && this.activeItemStack.getItem() == Items.SHIELD) {
+      if (damage >= 3.0F && this.activeItemStack.isShield(this)) {
          int i = 1 + MathHelper.floor(damage);
          Hand hand = this.getActiveHand();
          this.activeItemStack.damage(i, this, (p_213833_1_) -> {
             p_213833_1_.sendToolBreakStatus(hand);
+            net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, this.activeItemStack, hand);
          });
          if (this.activeItemStack.isEmpty()) {
             if (hand == Hand.MAIN_HAND) {
@@ -843,11 +889,14 @@
 
    protected void applyDamage(DamageSource damageSrc, float damageAmount) {
       if (!this.isInvulnerableTo(damageSrc)) {
+         damageAmount = net.minecraftforge.common.ForgeHooks.onLivingHurt(this, damageSrc, damageAmount);
+         if (damageAmount <= 0) return;
          damageAmount = this.applyArmorToDamage(damageSrc, damageAmount);
          damageAmount = this.applyEnchantmentsToDamage(damageSrc, damageAmount);
          float f = damageAmount;
          damageAmount = Math.max(damageAmount - this.getAbsorptionAmount(), 0.0F);
          this.setAbsorptionAmount(this.getAbsorptionAmount() - (f - damageAmount));
+         damageAmount = net.minecraftforge.common.ForgeHooks.onLivingDamage(this, damageSrc, damageAmount);
          float f1 = f - damageAmount;
          if (f1 > 0.0F && f1 < 3.4028235E37F) {
             this.increaseStat(Stats.DAMAGE_ABSORBED, Math.round(f1 * 10.0F));
@@ -902,6 +951,8 @@
 
          return ActionResult.PASS;
       } else {
+         ActionResult cancelResult = net.minecraftforge.common.ForgeHooks.onInteractEntity(this, entityToInteractOn, hand);
+         if (cancelResult != null) return cancelResult;
          ItemStack itemstack = this.getStackInHand(hand);
          ItemStack itemstack1 = itemstack.isEmpty() ? ItemStack.EMPTY : itemstack.copy();
          if (entityToInteractOn.interact(this, hand)) {
@@ -909,6 +960,9 @@
                itemstack.setCount(itemstack1.getCount());
             }
 
+            if (!this.abilities.creativeMode && itemstack.isEmpty()) {
+               net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, itemstack1, hand);
+            }
             return ActionResult.SUCCESS;
          } else {
             if (!itemstack.isEmpty() && entityToInteractOn instanceof LivingEntity) {
@@ -918,6 +972,7 @@
 
                if (itemstack.useOnEntity(this, (LivingEntity)entityToInteractOn, hand)) {
                   if (itemstack.isEmpty() && !this.abilities.creativeMode) {
+                     net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, itemstack1, hand);
                      this.setStackInHand(hand, ItemStack.EMPTY);
                   }
 
@@ -944,6 +999,7 @@
    }
 
    public void attack(Entity targetEntity) {
+      if (!net.minecraftforge.common.ForgeHooks.onPlayerAttackTarget(this, targetEntity)) return;
       if (targetEntity.isAttackable()) {
          if (!targetEntity.handleAttack(this)) {
             float f = (float)this.getAttributeInstance(EntityAttributes.ATTACK_DAMAGE).getValue();
@@ -971,8 +1027,10 @@
 
                boolean flag2 = flag && this.fallDistance > 0.0F && !this.onGround && !this.isClimbing() && !this.isInsideWater() && !this.hasStatusEffect(StatusEffects.BLINDNESS) && !this.hasVehicle() && targetEntity instanceof LivingEntity;
                flag2 = flag2 && !this.isSprinting();
+               net.minecraftforge.event.entity.player.CriticalHitEvent hitResult = net.minecraftforge.common.ForgeHooks.getCriticalHit(this, targetEntity, flag2, flag2 ? 1.5F : 1.0F);
+               flag2 = hitResult != null;
                if (flag2) {
-                  f *= 1.5F;
+                  f *= hitResult.getDamageModifier();
                }
 
                f = f + f1;
@@ -1060,8 +1118,10 @@
                   }
 
                   if (!this.world.isClient && !itemstack1.isEmpty() && entity instanceof LivingEntity) {
+                     ItemStack copy = itemstack1.copy();
                      itemstack1.postHit((LivingEntity)entity, this);
                      if (itemstack1.isEmpty()) {
+                        net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, copy, Hand.MAIN_HAND);
                         this.setStackInHand(Hand.MAIN_HAND, ItemStack.EMPTY);
                      }
                   }
@@ -1103,7 +1163,7 @@
       }
 
       if (this.random.nextFloat() < f) {
-         this.getItemCooldownManager().set(Items.SHIELD, 100);
+         this.getItemCooldownManager().set(this.getActiveItem().getItem(), 100);
          this.clearActiveItem();
          this.world.sendEntityStatus(this, (byte)30);
       }
@@ -1129,8 +1189,9 @@
    public void requestRespawn() {
    }
 
-   public void remove() {
-      super.remove();
+   @Override
+   public void remove(boolean keepData) {
+      super.remove(keepData);
       this.playerContainer.close(this);
       if (this.container != null) {
          this.container.close(this);
@@ -1147,6 +1208,9 @@
    }
 
    public Either<PlayerEntity.SleepFailureReason, Unit> trySleep(BlockPos at) {
+      Optional<BlockPos> optAt = Optional.of(at);
+      PlayerEntity.SleepFailureReason ret = net.minecraftforge.event.ForgeEventFactory.onPlayerSleepInBed(this, optAt);
+      if (ret != null) return Either.left(ret);
       Direction direction = this.world.getBlockState(at).get(HorizontalFacingBlock.FACING);
       if (!this.world.isClient) {
          if (this.isSleeping() || !this.isAlive()) {
@@ -1157,7 +1221,7 @@
             return Either.left(PlayerEntity.SleepFailureReason.NOT_POSSIBLE_HERE);
          }
 
-         if (this.world.isDaylight()) {
+         if (!net.minecraftforge.event.ForgeEventFactory.fireSleepingTimeCheck(this, optAt)) {
             return Either.left(PlayerEntity.SleepFailureReason.NOT_POSSIBLE_NOW);
          }
 
@@ -1198,6 +1262,8 @@
    private boolean isWithinSleepingRange(BlockPos p_190774_1_, Direction p_190774_2_) {
       if (Math.abs(this.x - (double)p_190774_1_.getX()) <= 3.0D && Math.abs(this.y - (double)p_190774_1_.getY()) <= 2.0D && Math.abs(this.z - (double)p_190774_1_.getZ()) <= 3.0D) {
          return true;
+      } else if (p_190774_2_ == null) {
+         return false;
       } else {
          BlockPos blockpos = p_190774_1_.offset(p_190774_2_.getOpposite());
          return Math.abs(this.x - (double)blockpos.getX()) <= 3.0D && Math.abs(this.y - (double)blockpos.getY()) <= 2.0D && Math.abs(this.z - (double)blockpos.getZ()) <= 3.0D;
@@ -1210,6 +1276,7 @@
    }
 
    public void wakeUp(boolean immediately, boolean updateWorldFlag, boolean setSpawn) {
+      net.minecraftforge.event.ForgeEventFactory.onPlayerWakeup(this, immediately, updateWorldFlag, setSpawn);
       Optional<BlockPos> optional = this.getSleepingPosition();
       super.wakeUp();
       if (this.world instanceof ServerWorld && updateWorldFlag) {
@@ -1230,17 +1297,17 @@
    }
 
    public static Optional<Vec3d> method_7288(ViewableWorld p_213822_0_, BlockPos p_213822_1_, boolean p_213822_2_) {
-      Block block = p_213822_0_.getBlockState(p_213822_1_).getBlock();
-      if (!(block instanceof BedBlock)) {
+      BlockState blockState = p_213822_0_.getBlockState(p_213822_1_);
+      if (!(blockState.isBed(p_213822_0_, p_213822_1_, null))) {
          if (!p_213822_2_) {
             return Optional.empty();
          } else {
-            boolean flag = block.canMobSpawnInside();
+            boolean flag = blockState.getBlock().canMobSpawnInside();
             boolean flag1 = p_213822_0_.getBlockState(p_213822_1_.up()).getBlock().canMobSpawnInside();
             return flag && flag1 ? Optional.of(new Vec3d((double)p_213822_1_.getX() + 0.5D, (double)p_213822_1_.getY() + 0.1D, (double)p_213822_1_.getZ() + 0.5D)) : Optional.empty();
          }
       } else {
-         return BedBlock.findWakeUpPosition(EntityType.PLAYER, p_213822_0_, p_213822_1_, 0);
+         return blockState.getBedSpawnPosition(EntityType.PLAYER, p_213822_0_, p_213822_1_, null);
       }
    }
 
@@ -1255,23 +1322,67 @@
    public void addChatMessage(Text chatComponent, boolean actionBar) {
    }
 
+   @Deprecated //Forge: Use Dimension sensitive version
    public BlockPos getSpawnPosition() {
-      return this.spawnPosition;
+      return getBedLocation(this.dimension);
+   }
+
+   /**
+    * A dimension aware version of getBedLocation.
+    * @param dim The dimension to get the bed spawn for
+    * @return The player specific spawn location for the dimension.  May be null.
+    */
+   public BlockPos getBedLocation(net.minecraft.world.dimension.DimensionType dim) {
+      return dim == net.minecraft.world.dimension.DimensionType.OVERWORLD ? spawnPosition : spawnPosMap.get(dim.getRegistryName());
    }
 
+   @Deprecated //Forge: Use Dimension sensitive version
    public boolean isSpawnForced() {
-      return this.spawnForced;
+      return isSpawnForced(this.dimension);
+   }
+
+   /**
+    * A dimension aware version of isSpawnForced.
+    * Noramally isSpawnForced is used to determine if the respawn system should check for a bed or not.
+    * This just extends that to be dimension aware.
+    * @param dim The dimension to get whether to check for a bed before spawning for
+    * @return The player specific spawn location for the dimension.  May be null.
+    */
+   public boolean isSpawnForced(net.minecraft.world.dimension.DimensionType dim) {
+      return dim == net.minecraft.world.dimension.DimensionType.OVERWORLD ? spawnForced : spawnForcedMap.getOrDefault(dim.getRegistryName(), false);
    }
 
+   @Deprecated //Forge: Use Dimension sensitive version
    public void setPlayerSpawn(BlockPos pos, boolean forced) {
-      if (pos != null) {
-         this.spawnPosition = pos;
-         this.spawnForced = forced;
-      } else {
-         this.spawnPosition = null;
-         this.spawnForced = false;
-      }
+      setSpawnPoint(pos, forced, this.dimension);
+   }
 
+   /**
+    * A dimension aware version of setSpawnChunk.
+    * This functions identically, but allows you to specify which dimension to affect, rather than affecting the player's current dimension.
+    * @param pos The spawn point to set as the player-specific spawn point for the dimension
+    * @param forced Whether or not the respawn code should check for a bed at this location (true means it won't check for a bed)
+    * @param dim Which dimension to apply the player-specific respawn point to
+    */
+   public void setSpawnPoint(@Nullable BlockPos pos, boolean forced, net.minecraft.world.dimension.DimensionType dim) {
+       if(net.minecraftforge.event.ForgeEventFactory.onPlayerSpawnSet(this, pos, forced)) return;
+       if (dim != net.minecraft.world.dimension.DimensionType.OVERWORLD) {
+          if (pos == null) {
+             spawnPosMap.remove(dim.getRegistryName());
+             spawnForcedMap.remove(dim.getRegistryName());
+          } else {
+             spawnPosMap.put(dim.getRegistryName(), pos);
+             spawnForcedMap.put(dim.getRegistryName(), forced);
+          }
+          return;
+       }
+       if (pos != null) {
+          this.spawnPosition = pos;
+          this.spawnForced = forced;
+       } else {
+          this.spawnPosition = null;
+          this.spawnForced = false;
+       }
    }
 
    public void incrementStat(Identifier stat) {
@@ -1437,6 +1548,8 @@
          }
 
          super.handleFallDamage(distance, damageMultiplier);
+      } else {
+         net.minecraftforge.event.ForgeEventFactory.onPlayerFall(this, distance, damageMultiplier);
       }
    }
 
@@ -1463,6 +1576,10 @@
    }
 
    public void addExperience(int p_195068_1_) {
+      net.minecraftforge.event.entity.player.PlayerXpEvent.XpChange event = new net.minecraftforge.event.entity.player.PlayerXpEvent.XpChange(this, p_195068_1_);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+      p_195068_1_ = event.getAmount();
+      
       this.addScore(p_195068_1_);
       this.experienceProgress += (float)p_195068_1_ / (float)this.getNextLevelExperience();
       this.totalExperience = MathHelper.clamp(this.totalExperience + p_195068_1_, 0, Integer.MAX_VALUE);
@@ -1502,6 +1619,10 @@
    }
 
    public void addExperienceLevels(int levels) {
+      net.minecraftforge.event.entity.player.PlayerXpEvent.LevelChange event = new net.minecraftforge.event.entity.player.PlayerXpEvent.LevelChange(this, levels);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+      levels = event.getLevels();
+      
       this.experienceLevel += levels;
       if (this.experienceLevel < 0) {
          this.experienceLevel = 0;
@@ -1704,7 +1825,10 @@
    }
 
    public Text getDisplayName() {
-      Text itextcomponent = Team.modifyText(this.getScoreboardTeam(), this.getName());
+      Text itextcomponent = new LiteralText("");
+      prefixes.forEach(e -> itextcomponent.append(e));
+      itextcomponent.append(Team.modifyText(this.getScoreboardTeam(), this.getName()));
+      suffixes.forEach(e -> itextcomponent.append(e));
       return this.addTellClickEvent(itextcomponent);
    }
 
@@ -1940,4 +2064,44 @@
          return this.text;
       }
    }
+   // =========== FORGE START ==============//
+   public net.minecraft.world.dimension.DimensionType getSpawnDimension() {
+      return this.spawnDimension;
+   }
+
+   public void setSpawnDimenion(net.minecraft.world.dimension.DimensionType dim) {
+       this.spawnDimension = dim;
+   }
+
+   public Collection<Text> getPrefixes() {
+       return this.prefixes;
+   }
+
+   public Collection<Text> getSuffixes() {
+       return this.suffixes;
+   }
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerMainHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.PlayerMainInvWrapper(inventory));
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerEquipmentHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.CombinedInvWrapper(
+                     new net.minecraftforge.items.wrapper.PlayerArmorInvWrapper(inventory),
+                     new net.minecraftforge.items.wrapper.PlayerOffhandInvWrapper(inventory)));
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerJoinedHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.PlayerInvWrapper(inventory));
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (this.isAlive() && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == null) return playerJoinedHandler.cast();
+         else if (facing.getAxis().isVertical()) return playerMainHandler.cast();
+         else if (facing.getAxis().isHorizontal()) return playerEquipmentHandler.cast();
+      }
+      return super.getCapability(capability, facing);
+   }
 }
