--- a/net/minecraft/entity/LivingEntity.java
+++ b/net/minecraft/entity/LivingEntity.java
@@ -15,7 +15,6 @@
 import javax.annotation.Nullable;
 import net.minecraft.advancement.criterion.Criterions;
 import net.minecraft.block.BedBlock;
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.block.LadderBlock;
@@ -33,7 +32,6 @@
 import net.minecraft.entity.ai.brain.Brain;
 import net.minecraft.entity.boss.WitherEntity;
 import net.minecraft.entity.vehicle.BoatEntity;
-import net.minecraft.entity.passive.WolfEntity;
 import net.minecraft.entity.passive.HorseBaseEntity;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.server.network.ServerPlayerEntity;
@@ -96,14 +94,20 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.commons.lang3.tuple.Pair;
+
+import net.minecraft;
 import net.minecraft.entity.ai.TargetPredicate;
 import net.minecraft.entity.attribute.EntityAttributes;
 import net.minecraft.entity.mob.MobEntityWithAi;
 
-
 public abstract class LivingEntity extends Entity {
    private static final UUID ATTR_SPRINTING_SPEED_BOOST_ID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
+   private static final UUID SLOW_FALLING_ID = UUID.fromString("A5B6CF2A-2F7C-31EF-9022-7C3E7D5E6ABA");
    private static final EntityAttributeModifier ATTR_SPRINTING_SPEED_BOOST = (new EntityAttributeModifier(ATTR_SPRINTING_SPEED_BOOST_ID, "Sprinting speed boost", (double)0.3F, EntityAttributeModifier.Operation.MULTIPLY_TOTAL)).setSerialize(false);
+   private static final EntityAttributeModifier SLOW_FALLING = new EntityAttributeModifier(SLOW_FALLING_ID, "Slow falling acceleration reduction", -0.07, EntityAttributeModifier.Operation.ADDITION).setSerialize(false); // Add -0.07 to 0.08 so we get the vanilla default of 0.01
+   public static final net.minecraft.entity.attribute.EntityAttribute SWIM_SPEED = new net.minecraft.entity.attribute.ClampedEntityAttribute(null, "forge.swimSpeed", 1.0D, 0.0D, 1024.0D).setTracked(true);
+   public static final net.minecraft.entity.attribute.EntityAttribute NAMETAG_DISTANCE = new net.minecraft.entity.attribute.ClampedEntityAttribute(null, "forge.nameTagDistance", 64.0D, 0.0D, Float.MAX_VALUE).setTracked(true);
+   public static final net.minecraft.entity.attribute.EntityAttribute ENTITY_GRAVITY = new net.minecraft.entity.attribute.ClampedEntityAttribute(null, "forge.entity_gravity", 0.08D, -8.0D, 8.0D).setTracked(true);
    protected static final TrackedData<Byte> LIVING_FLAGS = DataTracker.registerData(LivingEntity.class, TrackedDataHandlerRegistry.BYTE);
    private static final TrackedData<Float> HEALTH = DataTracker.registerData(LivingEntity.class, TrackedDataHandlerRegistry.FLOAT);
    private static final TrackedData<Integer> POTION_SWIRLS_COLOR = DataTracker.registerData(LivingEntity.class, TrackedDataHandlerRegistry.INTEGER);
@@ -227,6 +231,9 @@
       this.getAttributeContainer().register(EntityAttributes.MOVEMENT_SPEED);
       this.getAttributeContainer().register(EntityAttributes.ARMOR);
       this.getAttributeContainer().register(EntityAttributes.ARMOR_TOUGHNESS);
+      this.getAttributeContainer().register(SWIM_SPEED);
+      this.getAttributeContainer().register(NAMETAG_DISTANCE);
+      this.getAttributeContainer().register(ENTITY_GRAVITY);
    }
 
    protected void fall(double y, boolean onGroundIn, BlockState state, BlockPos pos) {
@@ -236,9 +243,10 @@
 
       if (!this.world.isClient && this.fallDistance > 3.0F && onGroundIn) {
          float f = (float)MathHelper.ceil(this.fallDistance - 3.0F);
-         if (!state.isAir()) {
+         if (!state.isAir(world, pos)) {
             double d0 = Math.min((double)(0.2F + f / 15.0F), 2.5D);
             int i = (int)(150.0D * d0);
+            if (!state.addLandingEffects((ServerWorld)this.world, pos, state, this, i))
             ((ServerWorld)this.world).spawnParticles(new BlockStateParticleEffect(ParticleTypes.BLOCK, state), this.x, this.y, this.z, i, 0.0D, 0.0D, 0.0D, (double)0.15F);
          }
       }
@@ -302,7 +310,7 @@
                }
             }
 
-            if (!this.world.isClient && this.hasVehicle() && this.getVehicle() != null && !this.getVehicle().canBeRiddenInWater()) {
+            if (!this.world.isClient && this.hasVehicle() && this.getVehicle() != null && !this.getVehicle().canBeRiddenInWater(this)) {
                this.stopRiding();
             }
          } else if (this.getBreath() < this.getMaxBreath()) {
@@ -387,6 +395,7 @@
          if (!this.world.isClient && (this.shouldAlwaysDropXp() || this.playerHitTimer > 0 && this.canDropLootAndXp() && this.world.getGameRules().getBoolean(GameRules.DO_MOB_LOOT))) {
             int i = this.getCurrentExperience(this.attackingPlayer);
 
+            i = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.attackingPlayer, i);
             while(i > 0) {
                int j = ExperienceOrbEntity.roundToOrbSize(i);
                i -= j;
@@ -394,7 +403,7 @@
             }
          }
 
-         this.remove();
+         this.remove(this instanceof net.minecraft.server.network.ServerPlayerEntity); //Forge keep data until we revive player
 
          for(int k = 0; k < 20; ++k) {
             double d2 = this.random.nextGaussian() * 0.02D;
@@ -589,7 +598,7 @@
             StatusEffect effect = iterator.next();
             StatusEffectInstance effectinstance = this.activeStatusEffects.get(effect);
             if (!effectinstance.update(this)) {
-               if (!this.world.isClient) {
+               if (!this.world.isClient && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionExpiryEvent(this, effectinstance))) {
                   iterator.remove();
                   this.method_6129(effectinstance);
                }
@@ -639,8 +648,10 @@
          this.setInvisible(false);
       } else {
          Collection<StatusEffectInstance> collection = this.activeStatusEffects.values();
-         this.dataTracker.set(POTION_SWIRLS_AMBIENT, containsOnlyAmbientEffects(collection));
-         this.dataTracker.set(POTION_SWIRLS_COLOR, PotionUtil.getColor(collection));
+         net.minecraftforge.event.entity.living.PotionColorCalculationEvent event = new net.minecraftforge.event.entity.living.PotionColorCalculationEvent(this, PotionUtil.getColor(collection), containsOnlyAmbientEffects(collection), collection);
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+         this.dataTracker.set(POTION_SWIRLS_AMBIENT, event.areParticlesHidden());
+         this.dataTracker.set(POTION_SWIRLS_COLOR, event.getColor());
          this.setInvisible(this.hasStatusEffect(StatusEffects.INVISIBILITY));
       }
 
@@ -704,7 +715,10 @@
 
          boolean flag;
          for(flag = false; iterator.hasNext(); flag = true) {
-            this.method_6129(iterator.next());
+            StatusEffectInstance effect = iterator.next();
+            if(net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, effect))) continue;
+
+            this.method_6129(effect);
             iterator.remove();
          }
 
@@ -734,6 +748,7 @@
          return false;
       } else {
          StatusEffectInstance effectinstance = this.activeStatusEffects.get(p_195064_1_.getEffectType());
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionAddedEvent(this, effectinstance, p_195064_1_));
          if (effectinstance == null) {
             this.activeStatusEffects.put(p_195064_1_.getEffectType(), p_195064_1_);
             this.method_6020(p_195064_1_);
@@ -748,6 +763,9 @@
    }
 
    public boolean isPotionEffective(StatusEffectInstance potioneffectIn) {
+      net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent event = new net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent(this, potioneffectIn);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+      if (event.getResult() != net.minecraftforge.eventbus.api.Event.Result.DEFAULT) return event.getResult() == net.minecraftforge.eventbus.api.Event.Result.ALLOW;
       if (this.getGroup() == EntityGroup.UNDEAD) {
          StatusEffect effect = potioneffectIn.getEffectType();
          if (effect == StatusEffects.REGENERATION || effect == StatusEffects.POISON) {
@@ -768,6 +786,7 @@
    }
 
    public boolean removeStatusEffect(StatusEffect p_195063_1_) {
+      if(net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, p_195063_1_))) return false;
       StatusEffectInstance effectinstance = this.removePotionEffect(p_195063_1_);
       if (effectinstance != null) {
          this.method_6129(effectinstance);
@@ -804,6 +823,8 @@
    }
 
    public void heal(float healAmount) {
+      healAmount = net.minecraftforge.event.ForgeEventFactory.onLivingHeal(this, healAmount);
+      if (healAmount <= 0) return;
       float f = this.getHealth();
       if (f > 0.0F) {
          this.setHealth(f + healAmount);
@@ -820,6 +841,7 @@
    }
 
    public boolean damage(DamageSource source, float amount) {
+      if (!net.minecraftforge.common.ForgeHooks.onLivingAttack(this, source, amount)) return false;
       if (this.isInvulnerableTo(source)) {
          return false;
       } else if (this.world.isClient) {
@@ -886,8 +908,8 @@
             if (entity1 instanceof PlayerEntity) {
                this.playerHitTimer = 100;
                this.attackingPlayer = (PlayerEntity)entity1;
-            } else if (entity1 instanceof WolfEntity) {
-               WolfEntity wolfentity = (WolfEntity)entity1;
+            } else if (entity1 instanceof net.minecraft.entity.passive.TameableEntity) {
+               net.minecraft.entity.passive.TameableEntity wolfentity = (net.minecraft.entity.passive.TameableEntity)entity1;
                if (wolfentity.isTamed()) {
                   this.playerHitTimer = 100;
                   LivingEntity livingentity = wolfentity.getOwner();
@@ -1069,6 +1091,7 @@
    }
 
    public void onDeath(DamageSource cause) {
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this, cause)) return;
       if (!this.dead) {
          Entity entity = cause.getAttacker();
          LivingEntity livingentity = this.method_6124();
@@ -1090,7 +1113,7 @@
             this.drop(cause);
             boolean flag = false;
             if (livingentity instanceof WitherEntity) {
-               if (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+               if (net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.world, this)) {
                   BlockPos blockpos = new BlockPos(this.x, this.y, this.z);
                   BlockState blockstate = Blocks.WITHER_ROSE.getDefaultState();
                   if (this.world.getBlockState(blockpos).isAir() && blockstate.canPlaceAt(this.world, blockpos)) {
@@ -1113,12 +1136,9 @@
 
    protected void drop(DamageSource p_213345_1_) {
       Entity entity = p_213345_1_.getAttacker();
-      int i;
-      if (entity instanceof PlayerEntity) {
-         i = EnchantmentHelper.getLooting((LivingEntity)entity);
-      } else {
-         i = 0;
-      }
+
+      int i = net.minecraftforge.common.ForgeHooks.getLootingLevel(this, entity, p_213345_1_);
+      this.captureDrops(new java.util.ArrayList<>());
 
       boolean flag = this.playerHitTimer > 0;
       if (this.canDropLootAndXp() && this.world.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {
@@ -1127,6 +1147,10 @@
       }
 
       this.dropInventory();
+
+      Collection<ItemEntity> drops = captureDrops(null);
+      if (!net.minecraftforge.common.ForgeHooks.onLivingDrops(this, p_213345_1_, drops, i, playerHitTimer > 0))
+         drops.forEach(e -> world.spawnEntity(e));
    }
 
    protected void dropInventory() {
@@ -1156,6 +1180,9 @@
    }
 
    public void takeKnockback(Entity entityIn, float strength, double xRatio, double zRatio) {
+      net.minecraftforge.event.entity.living.LivingKnockBackEvent event = net.minecraftforge.common.ForgeHooks.onLivingKnockBack(this, entityIn, strength, xRatio, zRatio);
+      if(event.isCanceled()) return;
+      strength = event.getStrength(); xRatio = event.getRatioX(); zRatio = event.getRatioZ();
       if (!(this.random.nextDouble() < this.getAttributeInstance(EntityAttributes.KNOCKBACK_RESISTANCE).getValue())) {
          this.velocityDirty = true;
          Vec3d vec3d = this.getVelocity();
@@ -1191,12 +1218,7 @@
          return false;
       } else {
          BlockState blockstate = this.method_16212();
-         Block block = blockstate.getBlock();
-         if (block != Blocks.LADDER && block != Blocks.VINE && block != Blocks.SCAFFOLDING) {
-            return block instanceof TrapdoorBlock && this.method_6077(new BlockPos(this), blockstate);
-         } else {
-            return true;
-         }
+         return net.minecraftforge.common.ForgeHooks.isLivingOnLadder(blockstate, world, new BlockPos(this), this);
       }
    }
 
@@ -1220,6 +1242,9 @@
    }
 
    public void handleFallDamage(float distance, float damageMultiplier) {
+      float[] ret = net.minecraftforge.common.ForgeHooks.onLivingFall(this, distance, damageMultiplier);
+      if (ret == null) return;
+      distance = ret[0]; damageMultiplier = ret[1];
       super.handleFallDamage(distance, damageMultiplier);
       StatusEffectInstance effectinstance = this.getStatusEffect(StatusEffects.JUMP_BOOST);
       float f = effectinstance == null ? 0.0F : (float)(effectinstance.getAmplifier() + 1);
@@ -1232,7 +1257,7 @@
          int l = MathHelper.floor(this.z);
          BlockState blockstate = this.world.getBlockState(new BlockPos(j, k, l));
          if (!blockstate.isAir()) {
-            BlockSoundGroup soundtype = blockstate.getSoundGroup();
+            BlockSoundGroup soundtype = blockstate.getSoundType(world, new BlockPos(j, k, l), this);
             this.playSound(soundtype.getFallSound(), soundtype.getVolume() * 0.5F, soundtype.getPitch() * 0.75F);
          }
       }
@@ -1301,6 +1326,8 @@
 
    protected void applyDamage(DamageSource damageSrc, float damageAmount) {
       if (!this.isInvulnerableTo(damageSrc)) {
+         damageAmount = net.minecraftforge.common.ForgeHooks.onLivingHurt(this, damageSrc, damageAmount);
+         if (damageAmount <= 0) return;
          damageAmount = this.applyArmorToDamage(damageSrc, damageAmount);
          damageAmount = this.applyEnchantmentsToDamage(damageSrc, damageAmount);
          float f = damageAmount;
@@ -1311,10 +1338,11 @@
             ((ServerPlayerEntity)damageSrc.getAttacker()).increaseStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f1 * 10.0F));
          }
 
+         damageAmount = net.minecraftforge.common.ForgeHooks.onLivingDamage(this, damageSrc, damageAmount);
          if (damageAmount != 0.0F) {
             float f2 = this.getHealth();
-            this.setHealth(f2 - damageAmount);
             this.getDamageTracker().onDamage(damageSrc, f2, damageAmount);
+            this.setHealth(f2 - damageAmount); // Forge: moved to fix MC-121048
             this.setAbsorptionAmount(this.getAbsorptionAmount() - damageAmount);
          }
       }
@@ -1356,6 +1384,8 @@
    }
 
    public void swingHand(Hand hand) {
+      ItemStack stack = this.getStackInHand(hand);
+      if (!stack.isEmpty() && stack.onEntitySwing(this)) return;
       if (!this.isHandSwinging || this.handSwingTicks >= this.getHandSwingDuration() / 2 || this.handSwingTicks < 0) {
          this.handSwingTicks = -1;
          this.isHandSwinging = true;
@@ -1714,15 +1744,16 @@
       }
 
       this.velocityDirty = true;
+      net.minecraftforge.common.ForgeHooks.onLivingJump(this);
    }
 
    @OnlyIn(Dist.CLIENT)
    protected void method_6093() {
-      this.setVelocity(this.getVelocity().add(0.0D, (double)-0.04F, 0.0D));
+      this.setVelocity(this.getVelocity().add(0.0D, (double)-0.04F  * this.getAttributeInstance(SWIM_SPEED).getValue(), 0.0D));
    }
 
    protected void swimUpward(Tag<Fluid> fluidTag) {
-      this.setVelocity(this.getVelocity().add(0.0D, (double)0.04F, 0.0D));
+      this.setVelocity(this.getVelocity().add(0.0D, (double)0.04F * this.getAttributeInstance(SWIM_SPEED).getValue(), 0.0D));
    }
 
    protected float getBaseMovementSpeedMultiplier() {
@@ -1732,11 +1763,15 @@
    public void travel(Vec3d p_213352_1_) {
       if (this.canMoveVoluntarily() || this.isLogicalSideForUpdatingMovement()) {
          double d0 = 0.08D;
+         EntityAttributeInstance gravity = this.getAttributeInstance(ENTITY_GRAVITY);
          boolean flag = this.getVelocity().y <= 0.0D;
          if (flag && this.hasStatusEffect(StatusEffects.SLOW_FALLING)) {
-            d0 = 0.01D;
+            if (!gravity.hasModifier(SLOW_FALLING)) gravity.addModifier(SLOW_FALLING);
             this.fallDistance = 0.0F;
+         } else if (gravity.hasModifier(SLOW_FALLING)) {
+            gravity.removeModifier(SLOW_FALLING);
          }
+         d0 = gravity.getValue();
 
          if (!this.isInsideWater() || this instanceof PlayerEntity && ((PlayerEntity)this).abilities.flying) {
             if (!this.isInLava() || this instanceof PlayerEntity && ((PlayerEntity)this).abilities.flying) {
@@ -1785,7 +1820,7 @@
                   }
                } else {
                   BlockPos blockpos = new BlockPos(this.x, this.getBoundingBox().minY - 1.0D, this.z);
-                  float f5 = this.world.getBlockState(blockpos).getBlock().getSlipperiness();
+                  float f5 = this.world.getBlockState(blockpos).getSlipperiness(world, blockpos, this);
                   float f7 = this.onGround ? f5 * 0.91F : 0.91F;
                   this.updateVelocity(this.method_18802(f5), p_213352_1_);
                   this.setVelocity(this.method_18801(this.getVelocity()));
@@ -1847,6 +1882,7 @@
                f = 0.96F;
             }
 
+            f1 *= (float)this.getAttributeInstance(SWIM_SPEED).getValue();
             this.updateVelocity(f1, p_213352_1_);
             this.move(MovementType.SELF, this.getVelocity());
             Vec3d vec3d1 = this.getVelocity();
@@ -1922,6 +1958,7 @@
    }
 
    public void tick() {
+      if (net.minecraftforge.common.ForgeHooks.onLivingUpdate(this)) return;
       super.tick();
       this.method_6076();
       this.method_6072();
@@ -1953,7 +1990,9 @@
 
             ItemStack itemstack1 = this.getEquippedStack(equipmentslottype);
             if (!ItemStack.areEqualIgnoreDamage(itemstack1, itemstack)) {
+               if (!itemstack1.equals(itemstack, true))
                ((ServerWorld)this.world).getChunkManager().sendToOtherNearbyPlayers(this, new EntityEquipmentUpdateS2CPacket(this.getEntityId(), equipmentslottype, itemstack1));
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.LivingEquipmentChangeEvent(this, equipmentslottype, itemstack, itemstack1));
                if (!itemstack.isEmpty()) {
                   this.getAttributeContainer().removeAll(itemstack.getAttributeModifiers(equipmentslottype));
                }
@@ -2402,13 +2441,22 @@
 
    private void method_6076() {
       if (this.isUsingItem()) {
-         if (ItemStack.areItemsEqual(this.getStackInHand(this.getActiveHand()), this.activeItemStack)) {
+         ItemStack itemstack = this.getStackInHand(this.getActiveHand());
+         if (net.minecraftforge.common.ForgeHooks.canContinueUsing(this.activeItemStack, itemstack)) this.activeItemStack = itemstack;
+         if (itemstack == this.activeItemStack) {
+
+            if (!this.activeItemStack.isEmpty()) {
+               itemUseTimeLeft = net.minecraftforge.event.ForgeEventFactory.onItemUseTick(this, activeItemStack, itemUseTimeLeft);
+               if (itemUseTimeLeft > 0)
+                  activeItemStack.onUsingTick(this, itemUseTimeLeft);
+            }
+
             this.activeItemStack.usageTick(this.world, this, this.getItemUseTimeLeft());
             if (this.getItemUseTimeLeft() <= 25 && this.getItemUseTimeLeft() % 4 == 0) {
                this.spawnConsumptionEffects(this.activeItemStack, 5);
             }
 
-            if (--this.itemUseTimeLeft == 0 && !this.world.isClient && !this.activeItemStack.isUsedOnRelease()) {
+            if (--this.itemUseTimeLeft <= 0 && !this.world.isClient && !this.activeItemStack.isUsedOnRelease()) {
                this.method_6040();
             }
          } else {
@@ -2442,8 +2490,10 @@
    public void setCurrentHand(Hand hand) {
       ItemStack itemstack = this.getStackInHand(hand);
       if (!itemstack.isEmpty() && !this.isUsingItem()) {
+         int duration = net.minecraftforge.event.ForgeEventFactory.onItemUseStart(this, itemstack, itemstack.getMaxUseTime());
+         if (duration <= 0) return;
          this.activeItemStack = itemstack;
-         this.itemUseTimeLeft = itemstack.getMaxUseTime();
+         this.itemUseTimeLeft = duration;
          if (!this.world.isClient) {
             this.setLivingFlag(1, true);
             this.setLivingFlag(2, hand == Hand.OFF_HAND);
@@ -2503,6 +2553,9 @@
          vec3d1 = vec3d1.rotateX(-this.pitch * ((float)Math.PI / 180F));
          vec3d1 = vec3d1.rotateY(-this.yaw * ((float)Math.PI / 180F));
          vec3d1 = vec3d1.add(this.x, this.y + (double)this.getStandingEyeHeight(), this.z);
+         if (this.world instanceof ServerWorld) //Forge: Fix MC-2518 spawnParticle is nooped on server, need to use server specific variant
+            ((ServerWorld)this.world).spawnParticles(new ItemStackParticleEffect(ParticleTypes.ITEM, stack), vec3d1.x, vec3d1.y, vec3d1.z, 1, vec3d.x, vec3d.y + 0.05D, vec3d.z, 0.0D);
+         else
          this.world.addParticle(new ItemStackParticleEffect(ParticleTypes.ITEM, stack), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
       }
 
@@ -2511,7 +2564,9 @@
    protected void method_6040() {
       if (!this.activeItemStack.isEmpty() && this.isUsingItem()) {
          this.spawnConsumptionEffects(this.activeItemStack, 16);
-         this.setStackInHand(this.getActiveHand(), this.activeItemStack.finishUsing(this.world, this));
+         ItemStack copy = this.activeItemStack.copy();
+         ItemStack stack = net.minecraftforge.event.ForgeEventFactory.onItemUseFinish(this, copy, getItemUseTimeLeft(), this.activeItemStack.finishUsing(this.world, this));
+         this.setStackInHand(this.getActiveHand(), stack);
          this.clearActiveItem();
       }
 
@@ -2531,7 +2586,11 @@
 
    public void stopUsingItem() {
       if (!this.activeItemStack.isEmpty()) {
+         if (!net.minecraftforge.event.ForgeEventFactory.onUseItemStop(this, activeItemStack, this.getItemUseTimeLeft())) {
+            ItemStack copy = this instanceof PlayerEntity ? activeItemStack.copy() : null;
          this.activeItemStack.onStoppedUsing(this.world, this, this.getItemUseTimeLeft());
+           if (copy != null && activeItemStack.isEmpty()) net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem((PlayerEntity)this, copy, getActiveHand());
+         }
          if (this.activeItemStack.isUsedOnRelease()) {
             this.method_6076();
          }
@@ -2686,16 +2745,16 @@
 
    private boolean isSleepingInBed() {
       return this.getSleepingPosition().map((p_213347_1_) -> {
-         return this.world.getBlockState(p_213347_1_).getBlock() instanceof BedBlock;
+         return net.minecraftforge.event.ForgeEventFactory.fireSleepingLocationCheck(this, p_213347_1_);
       }).orElse(false);
    }
 
    public void wakeUp() {
       this.getSleepingPosition().filter(this.world::isBlockLoaded).ifPresent((p_213368_1_) -> {
          BlockState blockstate = this.world.getBlockState(p_213368_1_);
-         if (blockstate.getBlock() instanceof BedBlock) {
-            this.world.setBlockState(p_213368_1_, blockstate.with(BedBlock.OCCUPIED, Boolean.valueOf(false)), 3);
-            Vec3d vec3d = BedBlock.findWakeUpPosition(this.getType(), this.world, p_213368_1_, 0).orElseGet(() -> {
+         if (blockstate.isBed(this.world, p_213368_1_, this)) {
+            blockstate.setBedOccupied(world, p_213368_1_, this, false);
+            Vec3d vec3d = blockstate.getBedSpawnPosition(this.getType(), world, p_213368_1_, this).orElseGet(()-> {
                BlockPos blockpos = p_213368_1_.up();
                return new Vec3d((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.1D, (double)blockpos.getZ() + 0.5D);
             });
@@ -2710,8 +2769,13 @@
    @Nullable
    @OnlyIn(Dist.CLIENT)
    public Direction getSleepingDirection() {
+//      this.getBedPosition().map(pos->{ // This is apparently an "optimization" by Mojang, so we'll copy their lead here for now
+//         BlockState state = this.world.getBlockState(pos);
+//         return !state.isBed(world, pos, this) ? Direction.UP : state.getBedDirection(world, pos);
+//      });
       BlockPos blockpos = this.getSleepingPosition().orElse((BlockPos)null);
-      return blockpos != null ? BedBlock.getDirection(this.world, blockpos) : null;
+      BlockState state = this.world.getBlockState(blockpos);
+      return !state.isBed(world, blockpos, this) ? Direction.UP : state.getBedDirection(world, blockpos);
    }
 
    public boolean isInsideWall() {
@@ -2778,4 +2842,58 @@
    public void sendToolBreakStatus(Hand p_213334_1_) {
       this.sendEquipmentBreakStatus(p_213334_1_ == Hand.MAIN_HAND ? EquipmentSlot.MAINHAND : EquipmentSlot.OFFHAND);
    }
+
+   /* ==== FORGE START ==== */
+   /***
+    * Removes all potion effects that have curativeItem as a curative item for its effect
+    * @param curativeItem The itemstack we are using to cure potion effects
+    */
+   public boolean curePotionEffects(ItemStack curativeItem) {
+      if (this.world.isClient)
+         return false;
+      boolean ret = false;
+      Iterator<StatusEffectInstance> itr = this.activeStatusEffects.values().iterator();
+      while (itr.hasNext()) {
+         StatusEffectInstance effect = itr.next();
+         if (effect.isCurativeItem(curativeItem) && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, effect))) {
+            this.method_6129(effect);
+            itr.remove();
+            ret = true;
+            this.field_6285 = true;
+         }
+      }
+      return ret;
+   }
+
+   /**
+    * Returns true if the entity's rider (EntityPlayer) should face forward when mounted.
+    * currently only used in vanilla code by pigs.
+    *
+    * @param player The player who is riding the entity.
+    * @return If the player should orient the same direction as this entity.
+    */
+   public boolean shouldRiderFaceForward(PlayerEntity player) {
+      return this instanceof net.minecraft.entity.passive.PigEntity;
+   }
+
+   private final net.minecraftforge.common.util.LazyOptional<?>[] handlers = net.minecraftforge.items.wrapper.EntityEquipmentInvWrapper.create(this);
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (this.isAlive() && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == null) return handlers[2].cast();
+         else if (facing.getAxis().isVertical()) return handlers[0].cast();
+         else if (facing.getAxis().isHorizontal()) return handlers[1].cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   @Override
+   public void remove(boolean keepData) {
+      super.remove(keepData);
+      if (!keepData) {
+         for (int x = 0; x < handlers.length; x++)
+            handlers[x].invalidate();
+      }
+   }
 }
