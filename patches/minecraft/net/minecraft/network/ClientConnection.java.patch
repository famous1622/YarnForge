--- a/net/minecraft/network/ClientConnection.java
+++ b/net/minecraft/network/ClientConnection.java
@@ -44,11 +44,11 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
+
 import net.minecraft.network.encryption.PacketDecryptor;
 import net.minecraft.network.encryption.PacketEncryptor;
 import net.minecraft.network.listener.PacketListener;
 
-
 public class ClientConnection extends SimpleChannelInboundHandler<Packet<?>> {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final Marker MARKER_NETWORK = MarkerManager.getMarker("NETWORK");
@@ -77,6 +77,7 @@
    private float avgPacketsSent;
    private int ticks;
    private boolean field_11640;
+   private java.util.function.Consumer<ClientConnection> activationHandler;
 
    public ClientConnection(NetworkSide packetDirection) {
       this.side = packetDirection;
@@ -86,6 +87,7 @@
       super.channelActive(p_channelActive_1_);
       this.channel = p_channelActive_1_.channel();
       this.address = this.channel.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
 
       try {
          this.setState(NetworkState.HANDSHAKING);
@@ -176,7 +178,7 @@
       ++this.packetsSentCounter;
       if (protocoltype1 != protocoltype) {
          LOGGER.debug("Disabled auto read");
-         this.channel.config().setAutoRead(false);
+         this.channel.eventLoop().execute(()->this.channel.config().setAutoRead(false));
       }
 
       if (this.channel.eventLoop().inEventLoop()) {
@@ -260,7 +262,9 @@
 
    @OnlyIn(Dist.CLIENT)
    public static ClientConnection connect(InetAddress address, int serverPort, boolean useNativeTransport) {
+      if (address instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
       final ClientConnection networkmanager = new ClientConnection(NetworkSide.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       Lazy<? extends EventLoopGroup> lazyloadbase;
       if (Epoll.isAvailable() && useNativeTransport) {
@@ -288,6 +292,7 @@
    @OnlyIn(Dist.CLIENT)
    public static ClientConnection connect(SocketAddress address) {
       final ClientConnection networkmanager = new ClientConnection(NetworkSide.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(CLIENT_IO_GROUP_LOCAL.get()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_initChannel_1_) throws Exception {
             p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
@@ -379,6 +384,14 @@
       return this.avgPacketsSent;
    }
 
+   public Channel channel() {
+      return channel;
+   }
+
+   public NetworkSide getDirection() {
+      return this.side;
+   }
+
    static class PacketWrapper {
       private final Packet<?> packet;
       @Nullable
