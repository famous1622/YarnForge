--- a/net\minecraft\block\Block.java
+++ b/net\minecraft\block\Block.java
@@ -73,9 +73,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Block implements ItemConvertible {
+public class Block extends net.minecraftforge.registries.ForgeRegistryEntry<Block> implements ItemConvertible, net.minecraftforge.common.extensions.IForgeBlock {
    protected static final Logger LOGGER = LogManager.getLogger();
-   public static final IdList<BlockState> STATE_IDS = new IdList<>();
+   @Deprecated //Forge: Do not use, use GameRegistry
+   public static final IdList<BlockState> STATE_IDS = net.minecraftforge.registries.GameData.getBlockStateIDMap();
    private static final Direction[] FACINGS = new Direction[]{Direction.field_11039, Direction.field_11034, Direction.field_11043, Direction.field_11035, Direction.field_11033, Direction.field_11036};
    private static final LoadingCache<VoxelShape, Boolean> FULL_CUBE_SHAPE_CACHE = CacheBuilder.newBuilder().maximumSize(512L).weakKeys().build(new CacheLoader<VoxelShape, Boolean>() {
       public Boolean load(VoxelShape p_load_1_) {
@@ -149,7 +150,7 @@
 
    @Deprecated
    public boolean allowsSpawning(BlockState state, BlockView worldIn, BlockPos pos, EntityType<?> type) {
-      return state.isSideSolidFullSquare(worldIn, pos, Direction.field_11036) && this.lightLevel < 14;
+      return state.isSideSolidFullSquare(worldIn, pos, Direction.field_11036) && state.getLightValue(worldIn, pos) < 14;
    }
 
    @Deprecated
@@ -244,6 +245,10 @@
       this.resistance = properties.resistance;
       this.hardness = properties.hardness;
       this.randomTicks = properties.randomTicks;
+      this.harvestLevel = properties.harvestLevel;
+      this.harvestTool = properties.harvestTool;
+      final Identifier lootTableCache = properties.dropTableId;
+      this.lootTableSupplier = lootTableCache != null ? () -> lootTableCache : properties.lootTableSupplier != null ? properties.lootTableSupplier : () -> new Identifier(this.getRegistryName().getNamespace(), "blocks/" + this.getRegistryName().getPath());
       this.slipperiness = properties.slipperiness;
       this.velocityMultiplier = properties.slowDownMultiplier;
       this.jumpVelocityMultiplier = properties.jumpVelocityMultiplier;
@@ -295,7 +300,7 @@
 
    @Deprecated
    public boolean canReplace(BlockState state, ItemPlacementContext useContext) {
-      return this.material.isReplaceable() && (useContext.getStack().isEmpty() || useContext.getStack().getItem() != this.asItem());
+      return state.getMaterial().isReplaceable() && (useContext.getStack().isEmpty() || useContext.getStack().getItem() != this.asItem());
    }
 
    @Deprecated
@@ -312,8 +317,9 @@
       return this.randomTicks;
    }
 
+   @Deprecated //Forge: New State sensitive version.
    public boolean hasBlockEntity() {
-      return this instanceof BlockEntityProvider;
+      return hasTileEntity(getDefaultState());
    }
 
    @Deprecated
@@ -469,10 +475,9 @@
 
    @Deprecated
    public void onBlockRemoved(BlockState state, World worldIn, BlockPos pos, BlockState newState, boolean isMoving) {
-      if (this.hasBlockEntity() && state.getBlock() != newState.getBlock()) {
+      if (state.hasTileEntity() && (state.getBlock() != newState.getBlock() || !newState.hasTileEntity())) {
          worldIn.removeBlockEntity(pos);
       }
-
    }
 
    @Deprecated
@@ -481,8 +486,8 @@
       if (f == -1.0F) {
          return 0.0F;
       } else {
-         int i = player.isUsingEffectiveTool(state) ? 30 : 100;
-         return player.getBlockBreakingSpeed(state) / f / (float)i;
+         int i = net.minecraftforge.common.ForgeHooks.canHarvestBlock(state, player, worldIn, pos) ? 30 : 100;
+         return player.getDigSpeed(state, pos) / f / (float)i;
       }
    }
 
@@ -492,8 +497,7 @@
 
    public Identifier getDropTableId() {
       if (this.dropTableId == null) {
-         Identifier resourcelocation = Registry.field_11146.getId(this);
-         this.dropTableId = new Identifier(resourcelocation.getNamespace(), "blocks/" + resourcelocation.getPath());
+         this.dropTableId = this.lootTableSupplier.get();
       }
 
       return this.dropTableId;
@@ -553,7 +557,7 @@
    }
 
    public static void dropStack(World worldIn, BlockPos pos, ItemStack stack) {
-      if (!worldIn.isClient && !stack.isEmpty() && worldIn.getGameRules().getBoolean(GameRules.field_19392)) {
+      if (!worldIn.isClient && !stack.isEmpty() && worldIn.getGameRules().getBoolean(GameRules.field_19392) && !worldIn.restoringBlockSnapshots) { // do not drop items while restoring blockstates, prevents item dupe
          float f = 0.5F;
          double d0 = (double)(worldIn.random.nextFloat() * 0.5F) + 0.25D;
          double d1 = (double)(worldIn.random.nextFloat() * 0.5F) + 0.25D;
@@ -565,7 +569,7 @@
    }
 
    public void dropExperience(World worldIn, BlockPos pos, int amount) {
-      if (!worldIn.isClient && worldIn.getGameRules().getBoolean(GameRules.field_19392)) {
+      if (!worldIn.isClient && worldIn.getGameRules().getBoolean(GameRules.field_19392) && !worldIn.restoringBlockSnapshots) { // do not drop items while restoring blockstates, prevents item dupe
          while(amount > 0) {
             int i = ExperienceOrbEntity.roundToOrbSize(amount);
             amount -= i;
@@ -575,6 +579,7 @@
 
    }
 
+   @Deprecated //Forge: State sensitive version
    public float getBlastResistance() {
       return this.resistance;
    }
@@ -673,6 +678,7 @@
       entityIn.setVelocity(entityIn.getVelocity().multiply(1.0D, 0.0D, 1.0D));
    }
 
+   @Deprecated // Forge: Use more sensitive version below: getPickBlock
    public ItemStack getPickStack(BlockView worldIn, BlockPos pos, BlockState state) {
       return new ItemStack(this);
    }
@@ -686,6 +692,7 @@
       return Fluids.field_15906.getDefaultState();
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public float getSlipperiness() {
       return this.slipperiness;
    }
@@ -714,6 +721,7 @@
    public void rainTick(World worldIn, BlockPos pos) {
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public boolean shouldDropItemsOnExplosion(Explosion explosionIn) {
       return true;
    }
@@ -758,6 +766,7 @@
       }
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
    public BlockSoundGroup getSoundGroup(BlockState state) {
       return this.soundGroup;
    }
@@ -767,7 +776,7 @@
          this.cachedItem = Item.fromBlock(this);
       }
 
-      return this.cachedItem;
+      return this.cachedItem.delegate.get(); //Forge: Vanilla caches the items, update with registry replacements.
    }
 
    public boolean hasDynamicBounds() {
@@ -775,13 +784,81 @@
    }
 
    public String toString() {
-      return "Block{" + Registry.field_11146.getId(this) + "}";
+      return "Block{" + getRegistryName() + "}";
    }
 
    @OnlyIn(Dist.CLIENT)
    public void buildTooltip(ItemStack stack, @Nullable BlockView worldIn, List<Text> tooltip, TooltipContext flagIn) {
    }
 
+   /* ======================================== FORGE START =====================================*/
+   protected Random RANDOM = new Random();
+   private net.minecraftforge.common.ToolType harvestTool;
+   private int harvestLevel;
+   private final net.minecraftforge.common.util.ReverseTagWrapper<Block> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, BlockTags::getGeneration, BlockTags::getContainer);
+   private final java.util.function.Supplier<Identifier> lootTableSupplier;
+
+   @Override
+   public float getSlipperiness(BlockState state, WorldView world, BlockPos pos, @Nullable Entity entity) {
+      return this.slipperiness;
+   }
+
+   @Nullable
+   @Override
+   public net.minecraftforge.common.ToolType getHarvestTool(BlockState state) {
+      return harvestTool; //TODO: RE-Evaluate
+   }
+
+   @Override
+   public int getHarvestLevel(BlockState state) {
+      return harvestLevel; //TODO: RE-Evaluate
+   }
+
+   @Override
+   public boolean canSustainPlant(BlockState state, BlockView world, BlockPos pos, Direction facing, net.minecraftforge.common.IPlantable plantable) {
+       BlockState plant = plantable.getPlant(world, pos.offset(facing));
+       net.minecraftforge.common.PlantType type = plantable.getPlantType(world, pos.offset(facing));
+
+       if (plant.getBlock() == Blocks.field_10029)
+           return this.getBlock() == Blocks.field_10029 || this.getBlock() == Blocks.field_10102 || this.getBlock() == Blocks.field_10534;
+
+       if (plant.getBlock() == Blocks.field_10424 && this == Blocks.field_10424)
+           return true;
+
+       if (plantable instanceof PlantBlock && ((PlantBlock)plantable).canPlantOnTop(state, world, pos))
+           return true;
+
+       switch (type) {
+           case Desert: return this.getBlock() == Blocks.field_10102 || this.getBlock() == Blocks.field_10415 || this.getBlock() instanceof GlazedTerracottaBlock;
+           case Nether: return this.getBlock() == Blocks.field_10114;
+           case Crop:   return this.getBlock() == Blocks.field_10362;
+           case Cave:   return Block.isSideSolidFullSquare(state, world, pos, Direction.field_11036);
+           case Plains: return this.getBlock() == Blocks.field_10219 || net.minecraftforge.common.Tags.Blocks.DIRT.contains(this) || this.getBlock() == Blocks.field_10362;
+           case Water:  return state.getMaterial() == Material.WATER; //&& state.getValue(BlockLiquidWrapper)
+           case Beach:
+               boolean isBeach = this.getBlock() == Blocks.field_10219 || net.minecraftforge.common.Tags.Blocks.DIRT.contains(this) || this.getBlock() == Blocks.field_10102;
+               boolean hasWater = (world.getBlockState(pos.east()).getMaterial() == Material.WATER ||
+                       world.getBlockState(pos.west()).getMaterial() == Material.WATER ||
+                       world.getBlockState(pos.north()).getMaterial() == Material.WATER ||
+                       world.getBlockState(pos.south()).getMaterial() == Material.WATER);
+               return isBeach && hasWater;
+       }
+       return false;
+   }
+
+   @Override
+   public final java.util.Set<Identifier> getTags() {
+      return reverseTags.getTagNames();
+   }
+
+   static {
+      net.minecraftforge.common.ForgeHooks.setBlockToolSetter((block, tool, level) -> {
+         block.harvestTool = tool;
+         block.harvestLevel = level;
+      });
+   }
+   /* ========================================= FORGE END ======================================*/
+
    public static enum OffsetType {
       field_10656,
       field_10657,
@@ -803,6 +880,9 @@
       private Identifier dropTableId;
       private boolean opaque = true;
       private boolean dynamicBounds;
+      private int harvestLevel = -1;
+      private net.minecraftforge.common.ToolType harvestTool;
+      private java.util.function.Supplier<Identifier> lootTableSupplier;
 
       private Settings(Material materialIn, MaterialColor mapColorIn) {
          this.material = materialIn;
@@ -835,6 +915,8 @@
          block$properties.slowDownMultiplier = blockIn.getVelocityMultiplier();
          block$properties.dynamicBounds = blockIn.dynamicBounds;
          block$properties.opaque = blockIn.opaque;
+         block$properties.harvestLevel = blockIn.harvestLevel;
+         block$properties.harvestTool = blockIn.harvestTool;
          return block$properties;
       }
 
@@ -899,13 +981,23 @@
          return this;
       }
 
+      public Block.Settings harvestLevel(int harvestLevel) {
+          this.harvestLevel = harvestLevel;
+          return this;
+      }
+
+      public Block.Settings harvestTool(net.minecraftforge.common.ToolType harvestTool) {
+          this.harvestTool = harvestTool;
+          return this;
+      }
+
       public Block.Settings dropsNothing() {
          this.dropTableId = LootTables.EMPTY;
          return this;
       }
 
       public Block.Settings dropsLike(Block blockIn) {
-         this.dropTableId = blockIn.getDropTableId();
+         this.lootTableSupplier = () -> blockIn.delegate.get().getDropTableId();
          return this;
       }
    }
