--- a/net/minecraft/block/Block.java
+++ b/net/minecraft/block/Block.java
@@ -70,12 +70,13 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import net.minecraft.sound.BlockSoundGroup;
 
+import net.minecraft.sound.BlockSoundGroup;
 
-public class Block implements ItemConvertible {
+public class Block extends net.minecraftforge.registries.ForgeRegistryEntry<Block> implements ItemConvertible, net.minecraftforge.common.extensions.IForgeBlock {
    protected static final Logger LOGGER = LogManager.getLogger();
-   public static final IdList<BlockState> STATE_IDS = new IdList<>();
+   @Deprecated //Forge: Do not use, use GameRegistry
+   public static final IdList<BlockState> STATE_IDS = net.minecraftforge.registries.GameData.getBlockStateIDMap();
    private static final Direction[] FACINGS = new Direction[]{Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH, Direction.DOWN, Direction.UP};
    private static final LoadingCache<VoxelShape, Boolean> FULL_CUBE_SHAPE_CACHE = CacheBuilder.newBuilder().maximumSize(512L).weakKeys().build(new CacheLoader<VoxelShape, Boolean>() {
       public Boolean load(VoxelShape p_load_1_) {
@@ -244,6 +245,10 @@
       this.slipperiness = properties.slipperiness;
       this.dynamicBounds = properties.dynamicBounds;
       this.dropTableId = properties.dropTableId;
+      this.harvestLevel = properties.harvestLevel;
+      this.harvestTool = properties.harvestTool;
+      final Identifier lootTableCache = properties.dropTableId;
+      this.lootTableSupplier = lootTableCache != null ? () -> lootTableCache : properties.lootTableSupplier != null ? properties.lootTableSupplier : () -> new Identifier(this.getRegistryName().getNamespace(), "blocks/" + this.getRegistryName().getPath());
       this.stateFactory = builder.build(BlockState::new);
       this.setDefaultState(this.stateFactory.getDefaultState());
    }
@@ -289,7 +294,7 @@
 
    @Deprecated
    public boolean canReplace(BlockState state, ItemPlacementContext useContext) {
-      return this.material.isReplaceable() && (useContext.getStack().isEmpty() || useContext.getStack().getItem() != this.asItem());
+      return state.getMaterial().isReplaceable() && (useContext.getStack().isEmpty() || useContext.getStack().getItem() != this.asItem());
    }
 
    @Deprecated
@@ -301,8 +306,9 @@
       return this.randomTicks;
    }
 
+   @Deprecated //Forge: New State sensitive version.
    public boolean hasBlockEntity() {
-      return this instanceof BlockEntityProvider;
+      return hasTileEntity(getDefaultState());
    }
 
    @Deprecated
@@ -313,7 +319,7 @@
    @Deprecated
    @OnlyIn(Dist.CLIENT)
    public int getBlockBrightness(BlockState state, ExtendedBlockView worldIn, BlockPos pos) {
-      return worldIn.getLightmapIndex(pos, state.getLuminance());
+      return worldIn.getLightmapIndex(pos, state.getLightValue(worldIn, pos));
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -458,10 +464,9 @@
 
    @Deprecated
    public void onBlockRemoved(BlockState state, World worldIn, BlockPos pos, BlockState newState, boolean isMoving) {
-      if (this.hasBlockEntity() && state.getBlock() != newState.getBlock()) {
+      if (state.hasTileEntity() && state.getBlock() != newState.getBlock()) {
          worldIn.removeBlockEntity(pos);
       }
-
    }
 
    @Deprecated
@@ -470,8 +475,8 @@
       if (f == -1.0F) {
          return 0.0F;
       } else {
-         int i = player.isUsingEffectiveTool(state) ? 30 : 100;
-         return player.getBlockBreakingSpeed(state) / f / (float)i;
+         int i = net.minecraftforge.common.ForgeHooks.canHarvestBlock(state, player, worldIn, pos) ? 30 : 100;
+         return player.getDigSpeed(state, pos) / f / (float)i;
       }
    }
 
@@ -481,8 +486,7 @@
 
    public Identifier getDropTableId() {
       if (this.dropTableId == null) {
-         Identifier resourcelocation = Registry.BLOCK.getId(this);
-         this.dropTableId = new Identifier(resourcelocation.getNamespace(), "blocks/" + resourcelocation.getPath());
+         this.dropTableId = this.lootTableSupplier.get();
       }
 
       return this.dropTableId;
@@ -551,7 +555,7 @@
    }
 
    public static void dropStack(World worldIn, BlockPos pos, ItemStack stack) {
-      if (!worldIn.isClient && !stack.isEmpty() && worldIn.getGameRules().getBoolean(GameRules.DO_TILE_DROPS)) {
+      if (!worldIn.isClient && !stack.isEmpty() && worldIn.getGameRules().getBoolean(GameRules.DO_TILE_DROPS) && !worldIn.restoringBlockSnapshots) { // do not drop items while restoring blockstates, prevents item dupe
          float f = 0.5F;
          double d0 = (double)(worldIn.random.nextFloat() * 0.5F) + 0.25D;
          double d1 = (double)(worldIn.random.nextFloat() * 0.5F) + 0.25D;
@@ -563,7 +567,7 @@
    }
 
    public void dropExperience(World worldIn, BlockPos pos, int amount) {
-      if (!worldIn.isClient && worldIn.getGameRules().getBoolean(GameRules.DO_TILE_DROPS)) {
+      if (!worldIn.isClient && worldIn.getGameRules().getBoolean(GameRules.DO_TILE_DROPS) && !worldIn.restoringBlockSnapshots) { // do not drop items while restoring blockstates, prevents item dupe
          while(amount > 0) {
             int i = ExperienceOrbEntity.roundToOrbSize(amount);
             amount -= i;
@@ -573,6 +577,7 @@
 
    }
 
+   @Deprecated //Forge: State sensitive version
    public float getBlastResistance() {
       return this.resistance;
    }
@@ -675,6 +680,7 @@
       entityIn.setVelocity(entityIn.getVelocity().multiply(1.0D, 0.0D, 1.0D));
    }
 
+   @Deprecated // Forge: Use more sensitive version below: getPickBlock
    public ItemStack getPickStack(BlockView worldIn, BlockPos pos, BlockState state) {
       return new ItemStack(this);
    }
@@ -688,6 +694,7 @@
       return Fluids.EMPTY.getDefaultState();
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public float getSlipperiness() {
       return this.slipperiness;
    }
@@ -708,6 +715,7 @@
    public void onRainTick(World worldIn, BlockPos pos) {
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public boolean shouldDropItemsOnExplosion(Explosion explosionIn) {
       return true;
    }
@@ -752,6 +760,7 @@
       }
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
    public BlockSoundGroup getSoundGroup(BlockState state) {
       return this.soundGroup;
    }
@@ -761,7 +770,7 @@
          this.cachedItem = Item.fromBlock(this);
       }
 
-      return this.cachedItem;
+      return this.cachedItem.delegate.get(); //Forge: Vanilla caches the items, update with registry replacements.
    }
 
    public boolean hasDynamicBounds() {
@@ -769,7 +778,7 @@
    }
 
    public String toString() {
-      return "Block{" + Registry.BLOCK.getId(this) + "}";
+      return "Block{" + getRegistryName() + "}";
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -777,13 +786,81 @@
    }
 
    public static boolean isNaturalStone(Block blockIn) {
-      return blockIn == Blocks.STONE || blockIn == Blocks.GRANITE || blockIn == Blocks.DIORITE || blockIn == Blocks.ANDESITE;
+      return net.minecraftforge.common.Tags.Blocks.STONE.contains(blockIn);
    }
 
    public static boolean isNaturalDirt(Block blockIn) {
-      return blockIn == Blocks.DIRT || blockIn == Blocks.COARSE_DIRT || blockIn == Blocks.PODZOL;
+      return net.minecraftforge.common.Tags.Blocks.DIRT.contains(blockIn);
+   }
+
+   /* ======================================== FORGE START =====================================*/
+   protected Random RANDOM = new Random();
+   private net.minecraftforge.common.ToolType harvestTool;
+   private int harvestLevel;
+   private final net.minecraftforge.common.util.ReverseTagWrapper<Block> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, BlockTags::getGeneration, BlockTags::getContainer);
+   private final java.util.function.Supplier<Identifier> lootTableSupplier;
+
+   @Override
+   public float getSlipperiness(BlockState state, ViewableWorld world, BlockPos pos, @Nullable Entity entity) {
+      return this.slipperiness;
    }
 
+   @Nullable
+   @Override
+   public net.minecraftforge.common.ToolType getHarvestTool(BlockState state) {
+      return harvestTool; //TODO: RE-Evaluate
+   }
+
+   @Override
+   public int getHarvestLevel(BlockState state) {
+      return harvestLevel; //TODO: RE-Evaluate
+   }
+
+   @Override
+   public boolean canSustainPlant(BlockState state, BlockView world, BlockPos pos, Direction facing, net.minecraftforge.common.IPlantable plantable) {
+       BlockState plant = plantable.getPlant(world, pos.offset(facing));
+       net.minecraftforge.common.PlantType type = plantable.getPlantType(world, pos.offset(facing));
+
+       if (plant.getBlock() == Blocks.CACTUS)
+           return this.getBlock() == Blocks.CACTUS || this.getBlock() == Blocks.SAND || this.getBlock() == Blocks.RED_SAND;
+
+       if (plant.getBlock() == Blocks.SUGAR_CANE && this == Blocks.SUGAR_CANE)
+           return true;
+
+       if (plantable instanceof PlantBlock && ((PlantBlock)plantable).canPlantOnTop(state, world, pos))
+           return true;
+
+       switch (type) {
+           case Desert: return this.getBlock() == Blocks.SAND || this.getBlock() == Blocks.TERRACOTTA || this.getBlock() instanceof GlazedTerracottaBlock;
+           case Nether: return this.getBlock() == Blocks.SOUL_SAND;
+           case Crop:   return this.getBlock() == Blocks.FARMLAND;
+           case Cave:   return Block.isSideSolidFullSquare(state, world, pos, Direction.UP);
+           case Plains: return this.getBlock() == Blocks.GRASS_BLOCK || Block.isNaturalDirt(this) || this.getBlock() == Blocks.FARMLAND;
+           case Water:  return state.getMaterial() == Material.WATER; //&& state.getValue(BlockLiquidWrapper)
+           case Beach:
+               boolean isBeach = this.getBlock() == Blocks.GRASS_BLOCK || Block.isNaturalDirt(this) || this.getBlock() == Blocks.SAND;
+               boolean hasWater = (world.getBlockState(pos.east()).getMaterial() == Material.WATER ||
+                       world.getBlockState(pos.west()).getMaterial() == Material.WATER ||
+                       world.getBlockState(pos.north()).getMaterial() == Material.WATER ||
+                       world.getBlockState(pos.south()).getMaterial() == Material.WATER);
+               return isBeach && hasWater;
+       }
+       return false;
+   }
+
+   @Override
+   public final java.util.Set<Identifier> getTags() {
+      return reverseTags.getTagNames();
+   }
+
+   static {
+      net.minecraftforge.common.ForgeHooks.setBlockToolSetter((block, tool, level) -> {
+         block.harvestTool = tool;
+         block.harvestLevel = level;
+      });
+   }
+   /* ========================================= FORGE END ======================================*/
+
    public static enum OffsetType {
       NONE,
       XZ,
@@ -802,6 +879,9 @@
       private float slipperiness = 0.6F;
       private Identifier dropTableId;
       private boolean dynamicBounds;
+      private int harvestLevel = -1;
+      private net.minecraftforge.common.ToolType harvestTool;
+      private java.util.function.Supplier<Identifier> lootTableSupplier;
 
       private Settings(Material materialIn, MaterialColor mapColorIn) {
          this.material = materialIn;
@@ -832,6 +912,8 @@
          block$properties.soundGroup = blockIn.soundGroup;
          block$properties.slipperiness = blockIn.getSlipperiness();
          block$properties.dynamicBounds = blockIn.dynamicBounds;
+         block$properties.harvestLevel = blockIn.harvestLevel;
+         block$properties.harvestTool = blockIn.harvestTool;
          return block$properties;
       }
 
@@ -880,13 +962,23 @@
          return this;
       }
 
+      public Block.Settings harvestLevel(int harvestLevel) {
+          this.harvestLevel = harvestLevel;
+          return this;
+      }
+
+      public Block.Settings harvestTool(net.minecraftforge.common.ToolType harvestTool) {
+          this.harvestTool = harvestTool;
+          return this;
+      }
+
       public Block.Settings dropsNothing() {
          this.dropTableId = LootTables.EMPTY;
          return this;
       }
 
       public Block.Settings dropsLike(Block blockIn) {
-         this.dropTableId = blockIn.getDropTableId();
+         this.lootTableSupplier = () -> blockIn.delegate.get().getDropTableId();
          return this;
       }
    }
