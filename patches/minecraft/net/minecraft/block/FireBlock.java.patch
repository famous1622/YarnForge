--- a/net\minecraft\block\FireBlock.java
+++ b/net\minecraft\block\FireBlock.java
@@ -26,7 +26,6 @@
 import net.minecraft.world.World;
 import net.minecraft.world.WorldView;
 import net.minecraft.world.dimension.DimensionType;
-import net.minecraft.world.dimension.TheEndDimension;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
@@ -64,13 +63,13 @@
    public BlockState getStateForPosition(BlockView p_196448_1_, BlockPos p_196448_2_) {
       BlockPos blockpos = p_196448_2_.down();
       BlockState blockstate = p_196448_1_.getBlockState(blockpos);
-      if (!this.isFlammable(blockstate) && !blockstate.isSideSolidFullSquare(p_196448_1_, blockpos, Direction.field_11036)) {
+      if (!this.canCatchFire(p_196448_1_, p_196448_2_, Direction.field_11036) && !Block.isSideSolidFullSquare(blockstate, p_196448_1_, blockpos, Direction.field_11036)) {
          BlockState blockstate1 = this.getDefaultState();
 
          for(Direction direction : Direction.values()) {
             BooleanProperty booleanproperty = DIRECTION_PROPERTIES.get(direction);
             if (booleanproperty != null) {
-               blockstate1 = blockstate1.with(booleanproperty, Boolean.valueOf(this.isFlammable(p_196448_1_.getBlockState(p_196448_2_.offset(direction)))));
+               blockstate1 = blockstate1.with(booleanproperty, Boolean.valueOf(this.canCatchFire(p_196448_1_, p_196448_2_.offset(direction), direction.getOpposite())));
             }
          }
 
@@ -91,12 +90,14 @@
 
    public void scheduledTick(BlockState state, ServerWorld worldIn, BlockPos pos, Random rand) {
       if (worldIn.getGameRules().getBoolean(GameRules.field_19387)) {
+         if (!worldIn.isAreaLoaded(pos, 2)) return; // Forge: prevent loading unloaded chunks when spreading fire
          if (!state.canPlaceAt(worldIn, pos)) {
             worldIn.removeBlock(pos, false);
          }
 
          Block block = worldIn.getBlockState(pos.down()).getBlock();
-         boolean flag = worldIn.dimension instanceof TheEndDimension && block == Blocks.field_9987 || block == Blocks.field_10515 || block == Blocks.field_10092;
+         BlockState other = worldIn.getBlockState(pos.down());
+         boolean flag = other.isFireSource(worldIn, pos.down(), Direction.field_11036);
          int i = state.get(AGE);
          if (!flag && worldIn.isRaining() && this.isRainingAround(worldIn, pos) && rand.nextFloat() < 0.2F + (float)i * 0.03F) {
             worldIn.removeBlock(pos, false);
@@ -118,7 +119,7 @@
                   return;
                }
 
-               if (i == 15 && rand.nextInt(4) == 0 && !this.isFlammable(worldIn.getBlockState(pos.down()))) {
+               if (i == 15 && rand.nextInt(4) == 0 && !this.canCatchFire(worldIn, pos.down(), Direction.field_11036)) {
                   worldIn.removeBlock(pos, false);
                   return;
                }
@@ -126,12 +127,12 @@
 
             boolean flag1 = worldIn.hasHighHumidity(pos);
             int k = flag1 ? -50 : 0;
-            this.trySpreadingFire(worldIn, pos.east(), 300 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.west(), 300 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.down(), 250 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.up(), 250 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.north(), 300 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.south(), 300 + k, rand, i);
+            this.tryCatchFire(worldIn, pos.east(), 300 + k, rand, i, Direction.field_11039);
+            this.tryCatchFire(worldIn, pos.west(), 300 + k, rand, i, Direction.field_11034);
+            this.tryCatchFire(worldIn, pos.down(), 250 + k, rand, i, Direction.field_11036);
+            this.tryCatchFire(worldIn, pos.up(), 250 + k, rand, i, Direction.field_11033);
+            this.tryCatchFire(worldIn, pos.north(), 300 + k, rand, i, Direction.field_11035);
+            this.tryCatchFire(worldIn, pos.south(), 300 + k, rand, i, Direction.field_11043);
             BlockPos.Mutable blockpos$mutable = new BlockPos.Mutable();
 
             for(int l = -1; l <= 1; ++l) {
@@ -169,16 +170,18 @@
       return worldIn.hasRain(pos) || worldIn.hasRain(pos.west()) || worldIn.hasRain(pos.east()) || worldIn.hasRain(pos.north()) || worldIn.hasRain(pos.south());
    }
 
-   private int getSpreadChance(BlockState p_220274_1_) {
+   @Deprecated //Forge: Use IForgeBlockState.getFlammability, Public for default implementation only.
+   public int getSpreadChance(BlockState p_220274_1_) {
       return p_220274_1_.contains(Properties.WATERLOGGED) && p_220274_1_.get(Properties.WATERLOGGED) ? 0 : this.spreadChances.getInt(p_220274_1_.getBlock());
    }
 
-   private int getBurnChance(BlockState p_220275_1_) {
+   @Deprecated //Forge: Use IForgeBlockState.getFireSpreadSpeed
+   public int getBurnChance(BlockState p_220275_1_) {
       return p_220275_1_.contains(Properties.WATERLOGGED) && p_220275_1_.get(Properties.WATERLOGGED) ? 0 : this.burnChances.getInt(p_220275_1_.getBlock());
    }
 
-   private void trySpreadingFire(World worldIn, BlockPos pos, int chance, Random random, int age) {
-      int i = this.getSpreadChance(worldIn.getBlockState(pos));
+   private void tryCatchFire(World worldIn, BlockPos pos, int chance, Random random, int age, Direction face) {
+      int i = worldIn.getBlockState(pos).getFlammability(worldIn, pos, face);
       if (random.nextInt(chance) < i) {
          BlockState blockstate = worldIn.getBlockState(pos);
          if (random.nextInt(age + 10) < 5 && !worldIn.hasRain(pos)) {
@@ -188,18 +191,14 @@
             worldIn.removeBlock(pos, false);
          }
 
-         Block block = blockstate.getBlock();
-         if (block instanceof TntBlock) {
-            TntBlock tntblock = (TntBlock)block;
-            TntBlock.primeTnt(worldIn, pos);
-         }
+         blockstate.catchFire(worldIn, pos, face, null);
       }
 
    }
 
    private boolean areBlocksAroundFlammable(BlockView worldIn, BlockPos pos) {
       for(Direction direction : Direction.values()) {
-         if (this.isFlammable(worldIn.getBlockState(pos.offset(direction)))) {
+         if (this.canCatchFire(worldIn, pos.offset(direction), direction.getOpposite())) {
             return true;
          }
       }
@@ -215,13 +214,14 @@
 
          for(Direction direction : Direction.values()) {
             BlockState blockstate = worldIn.getBlockState(pos.offset(direction));
-            i = Math.max(this.getBurnChance(blockstate), i);
+            i = Math.max(blockstate.getFireSpreadSpeed(worldIn, pos.offset(direction), direction.getOpposite()), i);
          }
 
          return i;
       }
    }
 
+   @Deprecated //Forge: Use canCatchFire with more context
    public boolean isFlammable(BlockState p_196446_1_) {
       return this.getBurnChance(p_196446_1_) > 0;
    }
@@ -246,8 +246,8 @@
 
       BlockPos blockpos = pos.down();
       BlockState blockstate = worldIn.getBlockState(blockpos);
-      if (!this.isFlammable(blockstate) && !blockstate.isSideSolidFullSquare(worldIn, blockpos, Direction.field_11036)) {
-         if (this.isFlammable(worldIn.getBlockState(pos.west()))) {
+      if (!this.canCatchFire(worldIn, blockpos, Direction.field_11036) && !Block.isSideSolidFullSquare(blockstate, worldIn, blockpos, Direction.field_11036)) {
+         if (this.canCatchFire(worldIn, blockpos.west(), Direction.field_11034)) {
             for(int j = 0; j < 2; ++j) {
                double d3 = (double)pos.getX() + rand.nextDouble() * (double)0.1F;
                double d8 = (double)pos.getY() + rand.nextDouble();
@@ -256,7 +256,7 @@
             }
          }
 
-         if (this.isFlammable(worldIn.getBlockState(pos.east()))) {
+         if (this.canCatchFire(worldIn, pos.east(), Direction.field_11039)) {
             for(int k = 0; k < 2; ++k) {
                double d4 = (double)(pos.getX() + 1) - rand.nextDouble() * (double)0.1F;
                double d9 = (double)pos.getY() + rand.nextDouble();
@@ -265,7 +265,7 @@
             }
          }
 
-         if (this.isFlammable(worldIn.getBlockState(pos.north()))) {
+         if (this.canCatchFire(worldIn, pos.north(), Direction.field_11035)) {
             for(int l = 0; l < 2; ++l) {
                double d5 = (double)pos.getX() + rand.nextDouble();
                double d10 = (double)pos.getY() + rand.nextDouble();
@@ -274,7 +274,7 @@
             }
          }
 
-         if (this.isFlammable(worldIn.getBlockState(pos.south()))) {
+         if (this.canCatchFire(worldIn, pos.south(), Direction.field_11043)) {
             for(int i1 = 0; i1 < 2; ++i1) {
                double d6 = (double)pos.getX() + rand.nextDouble();
                double d11 = (double)pos.getY() + rand.nextDouble();
@@ -283,7 +283,7 @@
             }
          }
 
-         if (this.isFlammable(worldIn.getBlockState(pos.up()))) {
+         if (this.canCatchFire(worldIn, pos.up(), Direction.field_11033)) {
             for(int j1 = 0; j1 < 2; ++j1) {
                double d7 = (double)pos.getX() + rand.nextDouble();
                double d12 = (double)(pos.getY() + 1) - rand.nextDouble() * (double)0.1F;
@@ -307,10 +307,23 @@
    }
 
    public void registerFlammableBlock(Block blockIn, int encouragement, int flammability) {
+      if (blockIn == Blocks.field_10124) throw new IllegalArgumentException("Tried to set air on fire... This is bad.");
       this.burnChances.put(blockIn, encouragement);
       this.spreadChances.put(blockIn, flammability);
    }
 
+   /**
+    * Side sensitive version that calls the block function.
+    *
+    * @param world The current world
+    * @param pos Block position
+    * @param face The side the fire is coming from
+    * @return True if the face can catch fire.
+    */
+   public boolean canCatchFire(BlockView world, BlockPos pos, Direction face) {
+      return world.getBlockState(pos).isFlammable(world, pos, face);
+   }
+
    public static void registerDefaultFlammables() {
       FireBlock fireblock = (FireBlock)Blocks.field_10036;
       fireblock.registerFlammableBlock(Blocks.field_10161, 5, 20);
