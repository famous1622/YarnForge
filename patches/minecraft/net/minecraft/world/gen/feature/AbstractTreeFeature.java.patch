--- a/net/minecraft/world/gen/feature/AbstractTreeFeature.java
+++ b/net/minecraft/world/gen/feature/AbstractTreeFeature.java
@@ -27,19 +27,25 @@
 import net.minecraft.structure.Structure;
 
 public abstract class AbstractTreeFeature<T extends FeatureConfig> extends Feature<T> {
+   protected net.minecraftforge.common.IPlantable sapling = (net.minecraftforge.common.IPlantable)net.minecraft.block.Blocks.OAK_SAPLING;
+
    public AbstractTreeFeature(Function<Dynamic<?>, ? extends T> p_i49920_1_, boolean doBlockNofityOnPlace) {
       super(p_i49920_1_, doBlockNofityOnPlace);
    }
 
    protected static boolean canTreeReplace(TestableWorld p_214587_0_, BlockPos p_214587_1_) {
+      if (!(p_214587_0_ instanceof net.minecraft.world.ViewableWorld)) // FORGE: Redirect to state method when possible
       return p_214587_0_.testBlockState(p_214587_1_, (p_214573_0_) -> {
          Block block = p_214573_0_.getBlock();
          return p_214573_0_.isAir() || p_214573_0_.matches(BlockTags.LEAVES) || block == Blocks.GRASS_BLOCK || Block.isNaturalDirt(block) || block.matches(BlockTags.LOGS) || block.matches(BlockTags.SAPLINGS) || block == Blocks.VINE;
       });
+      else return p_214587_0_.testBlockState(p_214587_1_, state -> state.canBeReplacedByLogs((net.minecraft.world.ViewableWorld)p_214587_0_, p_214587_1_)); 
    }
 
    protected static boolean isAir(TestableWorld worldIn, BlockPos pos) {
+      if (!(worldIn instanceof net.minecraft.world.BlockView)) // FORGE: Redirect to state method when possible
       return worldIn.testBlockState(pos, BlockState::isAir);
+      else return worldIn.testBlockState(pos, state -> state.isAir((net.minecraft.world.BlockView)worldIn, pos));
    }
 
    protected static boolean isNaturalDirt(TestableWorld worldIn, BlockPos pos) {
@@ -61,11 +67,14 @@
    }
 
    protected static boolean isAirOrLeaves(TestableWorld worldIn, BlockPos pos) {
+      if (!(worldIn instanceof net.minecraft.world.ViewableWorld)) // FORGE: Redirect to state method when possible
       return worldIn.testBlockState(pos, (p_214581_0_) -> {
          return p_214581_0_.isAir() || p_214581_0_.matches(BlockTags.LEAVES);
       });
+      else return worldIn.testBlockState(pos, state -> state.canBeReplacedByLeaves((net.minecraft.world.ViewableWorld)worldIn, pos));
    }
 
+   @Deprecated //Forge: moved to isSoil
    protected static boolean isNaturalDirtOrGrass(TestableWorld worldIn, BlockPos pos) {
       return worldIn.testBlockState(pos, (p_214582_0_) -> {
          Block block = p_214582_0_.getBlock();
@@ -73,6 +82,13 @@
       });
    }
 
+   protected static boolean isSoil(TestableWorld reader, BlockPos pos, net.minecraftforge.common.IPlantable sapling) {
+      if (!(reader instanceof net.minecraft.world.BlockView) || sapling == null)
+         return isNaturalDirtOrGrass(reader, pos);
+      return reader.testBlockState(pos, state -> state.canSustainPlant((net.minecraft.world.BlockView)reader, pos, Direction.UP, sapling));
+   }
+
+   @Deprecated //Forge: moved to isSoilOrFarm
    protected static boolean isDirtOrGrass(TestableWorld worldIn, BlockPos pos) {
       return worldIn.testBlockState(pos, (p_214586_0_) -> {
          Block block = p_214586_0_.getBlock();
@@ -80,6 +96,12 @@
       });
    }
 
+   protected static boolean isSoilOrFarm(TestableWorld reader, BlockPos pos, net.minecraftforge.common.IPlantable sapling) {
+      if (!(reader instanceof net.minecraft.world.BlockView) || sapling == null)
+         return isDirtOrGrass(reader, pos);
+      return reader.testBlockState(pos, state -> state.canSustainPlant((net.minecraft.world.BlockView)reader, pos, Direction.UP, sapling));
+   }
+
    protected static boolean isReplaceablePlant(TestableWorld p_214576_0_, BlockPos p_214576_1_) {
       return p_214576_0_.testBlockState(p_214576_1_, (p_214588_0_) -> {
          Material material = p_214588_0_.getMaterial();
@@ -87,6 +109,7 @@
       });
    }
 
+   @Deprecated //Forge: moved to setDirtAt
    protected void setToDirt(ModifiableTestableWorld p_214584_1_, BlockPos p_214584_2_) {
       if (!isNaturalDirt(p_214584_1_, p_214584_2_)) {
          this.setBlockState(p_214584_1_, p_214584_2_, Blocks.DIRT.getDefaultState());
@@ -94,6 +117,14 @@
 
    }
 
+   protected void setDirtAt(ModifiableTestableWorld reader, BlockPos pos, BlockPos origin) {
+      if (!(reader instanceof IWorld)) {
+         setToDirt(reader, pos);
+         return;
+      }
+      ((IWorld)reader).getBlockState(pos).onPlantGrow((IWorld)reader, pos, origin);
+   }
+
    protected void setBlockState(ModifiableWorld worldIn, BlockPos pos, BlockState state) {
       this.setBlockStateWithoutUpdatingNeighbors(worldIn, pos, state);
    }
@@ -104,7 +135,6 @@
       if (BlockTags.LOGS.contains(p_208520_4_.getBlock())) {
          changedBlocks.add(pos.toImmutable());
       }
-
    }
 
    private void setBlockStateWithoutUpdatingNeighbors(ModifiableWorld p_208521_1_, BlockPos p_208521_2_, BlockState p_208521_3_) {
@@ -192,4 +222,13 @@
    }
 
    protected abstract boolean generate(Set<BlockPos> changedBlocks, ModifiableTestableWorld worldIn, Random rand, BlockPos position, MutableIntBoundingBox p_208519_5_);
+
+   protected net.minecraftforge.common.IPlantable getSapling() {
+      return sapling;
+   }
+
+   public AbstractTreeFeature<T> setSapling(net.minecraftforge.common.IPlantable sapling) {
+      this.sapling = sapling;
+      return this;
+   }
 }
