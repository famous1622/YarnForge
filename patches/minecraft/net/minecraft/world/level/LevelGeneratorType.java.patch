--- a/net/minecraft/world/level/LevelGeneratorType.java
+++ b/net/minecraft/world/level/LevelGeneratorType.java
@@ -4,7 +4,7 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
-public class LevelGeneratorType {
+public class LevelGeneratorType implements net.minecraftforge.common.extensions.IForgeWorldType {
    public static LevelGeneratorType[] TYPES = new LevelGeneratorType[16];
    public static final LevelGeneratorType DEFAULT = (new LevelGeneratorType(0, "default", 1)).setVersioned();
    public static final LevelGeneratorType FLAT = (new LevelGeneratorType(1, "flat")).setCustomizable(true);
@@ -23,6 +23,10 @@
    private boolean info;
    private boolean customizable;
 
+   public LevelGeneratorType(String name) {
+      this(getNextID(), name);
+   }
+
    private LevelGeneratorType(int id, String name) {
       this(id, name, name, 0);
    }
@@ -32,6 +36,7 @@
    }
 
    private LevelGeneratorType(int p_i49778_1_, String p_i49778_2_, String p_i49778_3_, int p_i49778_4_) {
+      if (p_i49778_2_.length() > 16 && DEBUG_ALL_BLOCK_STATES != null) throw new IllegalArgumentException("World type names must not be longer then 16: " + p_i49778_2_);
       this.name = p_i49778_2_;
       this.storedName = p_i49778_3_;
       this.version = p_i49778_4_;
@@ -40,6 +45,17 @@
       TYPES[p_i49778_1_] = this;
    }
 
+   private static int getNextID() {
+      for (int x = 0; x < TYPES.length; x++) {
+         if (TYPES[x] == null) {
+            return x;
+         }
+      }
+      int old = TYPES.length;
+      TYPES = java.util.Arrays.copyOf(TYPES, old + 16);
+      return old;
+   }
+
    public String getName() {
       return this.name;
    }
