--- a/net\minecraft\world\chunk\WorldChunk.java
+++ b/net\minecraft\world\chunk\WorldChunk.java
@@ -18,7 +18,6 @@
 import java.util.stream.StreamSupport;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
-import net.minecraft.block.BlockEntityProvider;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.block.entity.BlockEntity;
@@ -58,7 +57,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class WorldChunk implements Chunk {
+public class WorldChunk extends net.minecraftforge.common.capabilities.CapabilityProvider<WorldChunk> implements Chunk, net.minecraftforge.common.extensions.IForgeChunk {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final ChunkSection EMPTY_SECTION = null;
    private final ChunkSection[] sections = new ChunkSection[16];
@@ -91,6 +90,7 @@
    }
 
    public WorldChunk(World worldIn, ChunkPos chunkPosIn, BiomeArray biomeContainerIn, UpgradeData upgradeDataIn, TickScheduler<Block> tickBlocksIn, TickScheduler<Fluid> tickFluidsIn, long inhabitedTimeIn, @Nullable ChunkSection[] sectionsIn, @Nullable Consumer<WorldChunk> postLoadConsumerIn) {
+      super(WorldChunk.class);
       this.entitySections = new TypeFilterableList[16];
       this.world = worldIn;
       this.pos = chunkPosIn;
@@ -118,7 +118,7 @@
             LOGGER.warn("Could not set level chunk sections, array length is {} instead of {}", sectionsIn.length, this.sections.length);
          }
       }
-
+      this.gatherCapabilities();
    }
 
    public WorldChunk(World worldIn, ProtoChunk p_i49947_2_) {
@@ -263,14 +263,14 @@
 
          if (!this.world.isClient) {
             blockstate.onBlockRemoved(this.world, pos, state, isMoving);
-         } else if (block1 != block && block1 instanceof BlockEntityProvider) {
+         } else if ((block1 != block || !state.hasTileEntity()) && blockstate.hasTileEntity()) {
             this.world.removeBlockEntity(pos);
          }
 
          if (chunksection.getBlockState(i, j & 15, k).getBlock() != block) {
             return null;
          } else {
-            if (block1 instanceof BlockEntityProvider) {
+            if (blockstate.hasTileEntity()) {
                BlockEntity tileentity = this.getBlockEntity(pos, WorldChunk.CreationType.field_12859);
                if (tileentity != null) {
                   tileentity.resetBlock();
@@ -281,10 +281,10 @@
                state.onBlockAdded(this.world, pos, blockstate, isMoving);
             }
 
-            if (block instanceof BlockEntityProvider) {
+            if (state.hasTileEntity()) {
                BlockEntity tileentity1 = this.getBlockEntity(pos, WorldChunk.CreationType.field_12859);
                if (tileentity1 == null) {
-                  tileentity1 = ((BlockEntityProvider)block).createBlockEntity(this.world);
+                  tileentity1 = state.createTileEntity(this.world);
                   this.world.setBlockEntity(pos, tileentity1);
                } else {
                   tileentity1.resetBlock();
@@ -320,11 +320,13 @@
          k = this.entitySections.length - 1;
       }
 
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EnteringChunk(entityIn, this.pos.x, this.pos.z, entityIn.chunkX, entityIn.chunkZ));
       entityIn.updateNeeded = true;
       entityIn.chunkX = this.pos.x;
       entityIn.chunkY = k;
       entityIn.chunkZ = this.pos.z;
       this.entitySections[k].add(entityIn);
+      this.markDirty(); // Forge - ensure chunks are marked to save after an entity add
    }
 
    public void setHeightmap(Heightmap.Type type, long[] data) {
@@ -345,6 +347,7 @@
       }
 
       this.entitySections[index].remove(entityIn);
+      this.markDirty(); // Forge - ensure chunks are marked to save after entity removals
    }
 
    public int sampleHeightmap(Heightmap.Type heightmapType, int x, int z) {
@@ -355,7 +358,7 @@
    private BlockEntity createBlockEntity(BlockPos pos) {
       BlockState blockstate = this.getBlockState(pos);
       Block block = blockstate.getBlock();
-      return !block.hasBlockEntity() ? null : ((BlockEntityProvider)block).createBlockEntity(this.world);
+      return !blockstate.hasTileEntity() ? null : blockstate.createTileEntity(this.world);
    }
 
    @Nullable
@@ -366,6 +369,10 @@
    @Nullable
    public BlockEntity getBlockEntity(BlockPos pos, WorldChunk.CreationType creationMode) {
       BlockEntity tileentity = this.blockEntities.get(pos);
+      if (tileentity != null && tileentity.isRemoved()) {
+         blockEntities.remove(pos);
+         tileentity = null;
+      }
       if (tileentity == null) {
          CompoundTag compoundnbt = this.pendingBlockEntityTags.remove(pos);
          if (compoundnbt != null) {
@@ -381,9 +388,6 @@
             tileentity = this.createBlockEntity(pos);
             this.world.setBlockEntity(pos, tileentity);
          }
-      } else if (tileentity.isRemoved()) {
-         this.blockEntities.remove(pos);
-         return null;
       }
 
       return tileentity;
@@ -398,7 +402,7 @@
    }
 
    public void setBlockEntity(BlockPos pos, BlockEntity tileEntityIn) {
-      if (this.getBlockState(pos).getBlock() instanceof BlockEntityProvider) {
+      if (this.getBlockState(pos).hasTileEntity()) {
          tileEntityIn.setLocation(this.world, pos);
          tileEntityIn.cancelRemoval();
          BlockEntity tileentity = this.blockEntities.put(pos.toImmutable(), tileEntityIn);
@@ -417,9 +421,14 @@
    public CompoundTag method_20598(BlockPos pos) {
       BlockEntity tileentity = this.getBlockEntity(pos);
       if (tileentity != null && !tileentity.isRemoved()) {
+         try {
          CompoundTag compoundnbt1 = tileentity.toTag(new CompoundTag());
          compoundnbt1.putBoolean("keepPacked", false);
          return compoundnbt1;
+         } catch (Exception e) {
+            LogManager.getLogger().error("A TileEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", tileentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundTag compoundnbt = this.pendingBlockEntityTags.get(pos);
          if (compoundnbt != null) {
@@ -454,8 +463,8 @@
    }
 
    public void getEntities(@Nullable Entity entityIn, Box aabb, List<Entity> listToFill, @Nullable Predicate<? super Entity> filter) {
-      int i = MathHelper.floor((aabb.y1 - 2.0D) / 16.0D);
-      int j = MathHelper.floor((aabb.y2 + 2.0D) / 16.0D);
+      int i = MathHelper.floor((aabb.y1 - this.world.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((aabb.y2 + this.world.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.clamp(i, 0, this.entitySections.length - 1);
       j = MathHelper.clamp(j, 0, this.entitySections.length - 1);
 
@@ -482,8 +491,8 @@
    }
 
    public <T extends Entity> void getEntities(@Nullable EntityType<?> entitytypeIn, Box aabb, List<? super T> list, Predicate<? super T> filter) {
-      int i = MathHelper.floor((aabb.y1 - 2.0D) / 16.0D);
-      int j = MathHelper.floor((aabb.y2 + 2.0D) / 16.0D);
+      int i = MathHelper.floor((aabb.y1 - this.world.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((aabb.y2 + this.world.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.clamp(i, 0, this.entitySections.length - 1);
       j = MathHelper.clamp(j, 0, this.entitySections.length - 1);
 
@@ -498,8 +507,8 @@
    }
 
    public <T extends Entity> void getEntities(Class<? extends T> entityClass, Box aabb, List<T> listToFill, @Nullable Predicate<? super T> filter) {
-      int i = MathHelper.floor((aabb.y1 - 2.0D) / 16.0D);
-      int j = MathHelper.floor((aabb.y2 + 2.0D) / 16.0D);
+      int i = MathHelper.floor((aabb.y1 - this.world.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((aabb.y2 + this.world.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.clamp(i, 0, this.entitySections.length - 1);
       j = MathHelper.clamp(j, 0, this.entitySections.length - 1);
 
@@ -531,6 +540,11 @@
       };
       Sets.newHashSet(this.blockEntities.keySet()).stream().filter(predicate).forEach(this.world::removeBlockEntity);
 
+      for (BlockEntity tileEntity : blockEntities.values()) {
+         tileEntity.resetBlock();
+         tileEntity.getCachedState();
+      }
+
       for(int i = 0; i < this.sections.length; ++i) {
          ChunkSection chunksection = this.sections[i];
          if ((availableSections & 1 << i) == 0) {
@@ -594,7 +608,7 @@
 
    public Stream<BlockPos> getLightSourcesStream() {
       return StreamSupport.stream(BlockPos.iterate(this.pos.getStartX(), 0, this.pos.getStartZ(), this.pos.getEndX(), 255, this.pos.getEndZ()).spliterator(), false).filter((p_217312_1_) -> {
-         return this.getBlockState(p_217312_1_).getLuminance() != 0;
+         return this.getBlockState(p_217312_1_).getLightValue(getWorld(), p_217312_1_) != 0;
       });
    }
 
@@ -699,9 +713,9 @@
    private BlockEntity loadBlockEntity(BlockPos pos, CompoundTag compound) {
       BlockEntity tileentity;
       if ("DUMMY".equals(compound.getString("id"))) {
-         Block block = this.getBlockState(pos).getBlock();
-         if (block instanceof BlockEntityProvider) {
-            tileentity = ((BlockEntityProvider)block).createBlockEntity(this.world);
+         BlockState state = this.getBlockState(pos);
+         if (state.hasTileEntity()) {
+            tileentity = state.createTileEntity(this.world);
          } else {
             tileentity = null;
             LOGGER.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", pos, this.getBlockState(pos));
@@ -790,4 +804,30 @@
       field_12861,
       field_12859;
    }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   @javax.annotation.Nullable
+   public final CompoundTag writeCapsToNBT() {
+      return this.serializeCaps();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundTag tag) {
+      this.deserializeCaps(tag);
+   }
+
+   @Override
+   public World getWorldForge() {
+      return getWorld();
+   }
 }
